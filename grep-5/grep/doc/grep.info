Ceci est le fichier Info grep.info, produit par Makeinfo version 1.68à
partir du fichier d'entrée «grep.texi».

START-INFO-DIR-ENTRY
* grep: (grep).                   print lines matching a pattern.
END-INFO-DIR-ENTRY
   This file documents GREP, a pattern matching engine.

   Published by the Free Software Foundation, 59 Temple Place - Suite
330 Boston, MA 02111-1307, USA

   Copyright (C) 1998 Free Software Foundation, Inc.

   Permission is granted to make and distribute verbatim copies of this
manual provided the copyright notice and this permission notice are
preserved on all copies.

   Permission is granted to copy and distribute modified versions of
this manual under the conditions for verbatim copying, provided that
the entire resulting derived work is distributed under the terms of a
permission notice identical to this one.

   Permission is granted to copy and distribute translations of this
manual into another language, under the above conditions for modified
versions, except that this permission notice may be stated in a
translation approved by the Foundation.


File: grep.info,  Node: Top,  Next: Introduction,  Prev: (dir),  Up: (dir)

   This document was produced for version 2.3 of GNU GREP.

* Menu:

* Introduction::                Introduction.
* Invoking::                    Invoking GREP; description of options.
* Diagnostics::                 Exit status returned by GREP.
* Grep Programs::               GREP programs.
* Regular Expressions::         Regular Expressions.
* Reporting Bugs::              Reporting Bugs.
* Concept Index::               A menu with all the topics in this manual.
* Index::                       A menu with all GREP commands
                                 and command-line options.


File: grep.info,  Node: Introduction,  Next: Invoking,  Prev: Top,  Up: Top

Introduction
************

   GREP searches the input files for lines containing a match to a given
pattern list.  When it finds a match in a line, it copies the line to
standard output (by default), or does whatever other sort of output you
have requested with options.  GREP expects to do the matching on text.
Since newline is also a separator for the list of patterns, there is no
way to match newline characters in a text.


File: grep.info,  Node: Invoking,  Next: Diagnostics,  Prev: Introduction,  Up: Top

Invoking GREP
*************

   GREP comes with a rich set of options from POSIX.2 and GNU
extensions.

`-c'
`--count'
     Suppress normal output; instead print a count of matching lines
     for each input file.  With the `-v', `--revert-match' option,
     count non-matching lines.

`-e PATTERN'
`--regexp=PATTERN'
     Use PATTERN as the pattern; useful to protect  patterns beginning
     with a `-'.

`-f FILE'
`--file=FILE'
     Obtain patterns from FILE, one  per  line.   The  empty file
     contains zero patterns, and therefore matches nothing.

`-i'
`--ignore-case'
     Ignore case distinctions in both the  pattern  and  the input
     files.

`-l'
`--files-with-matches'
     Suppress normal output; instead print the name of  each input file
     from which output would normally have been printed.  The scanning
     of every file will stop on the first match.

`-n'
`--line-number'
     Prefix each line of output with the line number  within its input
     file.

`-q'
`--quiet'
`--silent'
     Quiet; suppress normal output.  The scanning of every file will
     stop on the first match.  Also see the `-s' or `--no-messages'
     option.

`-s'
`--no-messages'
     Suppress error messages about nonexistent or unreadable files.
     Portability  note:  unlike  GNU GREP, BSD GREP does not comply
     with POSIX.2, because BSD GREP lacks a `-q'  option and its `-s'
     option behaves like GNU GREP's `-q' option.  Shell scripts
     intended to be portable to BSD GREP should avoid both `-q' and
     `-s' and should redirect output to `/dev/null' instead.

`-v'
`--revert-match'
     Invert the sense of matching,  to  select  non-matching lines.

`-x'
`--line-regexp'
     Select only those matches that exactly match the  whole line.

GNU Extensions
==============

`-A NUM'
`--after-context=NUM'
     Print NUM lines of trailing context after matching lines.

`-B NUM'
`--before-context=NUM'
     Print NUM lines of leading context before matching lines.

`-C'
`--context[=NUM]'
     Print NUM lines (default 2) of output context.

`-NUM'
     Same as `--context=NUM' lines  of  leading  and  trailing context.
     However, grep will never print any given line more than once.

`-V'
`--version'
     Print the version number of GREP to the standard output stream.
     This  version  number  should  be  included  in all bug reports.

`--help'
     Print a usage message briefly summarizing these command-line
     options and the bug-reporting address, then exit.

`-b'
`--byte-offset'
     Print the byte offset within the input file before each line of
     output.  When GREP runs on MS-DOS or MS-Windows, the printed byte
     offsets depend on whether the `-u' (`--unix-byte-offsets') option
     is used; see below.

`-d ACTION'
`--directories=ACTION'
     If an input file is a directory, use ACTION to  process it.  By
     default, ACTION is `read', which means that directories are read
     just  as  if  they  were  ordinary files (some operating systems
     and filesystems disallow this, and will cause GREP to print error
     messages for every directory).  If ACTION is `skip', directories
     are silently skipped.  If ACTION is `recurse', GREP reads all
     files under each directory, recursively; this is equivalent to the
     `-r' option.

`-h'
`--no-filename'
     Suppress the prefixing of filenames on output when multiple files
     are searched.

`-L'
`--files-without-match'
     Suppress normal output; instead print the name of  each input file
     from  which  no output would normally have been printed.  The
     scanning of every file will  stop  on  the  first match.

`-a'
`--text'
     Do not suppress output lines that contain binary  data.  Normally,
     if  the  first  few bytes of a file indicate that the file
     contains binary data, grep outputs only a message saying that the
     file matches the pattern.  This option causes grep to act as if
     the  file  is  a  text file, even if it would otherwise be treated
     as binary.  *Warning:*  the  result  might  be  binary garbage
     printed  to  the  terminal,  which  can  have  nasty side-effects
     if the terminal driver interprets some of it as commands.

`-w'
`--word-regexp'
     Select only those lines containing  matches  that  form whole
     words.   The test is that the matching substring must either be at
     the beginning of the  line,  or  preceded by a non-word
     constituent character.  Similarly, it must be either at the end of
     the line or followed by a  non-word  constituent  character.
     Word-constituent characters are letters, digits, and the
     underscore.

`-r'
`--recursive'
     For each directory mentioned in the command line, read and process
     all files in that directory, recursively.  This is the same as the
     `-d recurse' option.

`-y'
     Obsolete synonym for `-i'.

`-U'
`--binary'
     Treat the file(s) as binary.  By default, under  MS-DOS and
     MS-Windows, GREP guesses the file type by looking at the contents
     of the first 32KB read from  the  file.  If GREP decides the file
     is a text file, it strips the CR characters from the original file
     contents (to  make regular  expressions  with  `^' and `$' work
     correctly).  Specifying `-U' overrules this guesswork, causing all
     files  to  be read and passed to the matching mechanism verbatim;
     if the file is a text file with  CR/LF  pairs at  the  end of each
     line, this will cause some regular expressions to fail.  This
     option is only supported  on MS-DOS and MS-Windows.

`-u'
`--unix-byte-offsets'
     Report Unix-style byte  offsets.   This  switch  causes GREP to
     report byte offsets as if the file were Unix style text file, i.e.
     the byte offsets ignore the CR characters which were stripped
     off.  This  will produce results identical to running GREP on a
     Unix machine.  This option has no  effect  unless  `-b' option is
     also used; it is only supported on MS-DOS and MS-Windows.

   Several additional options control which variant of the GREP
matching engine is used.  *Note Grep Programs::.

   GREP uses the environment variable LANG to provide
internationalization support, if compiled with this feature.


File: grep.info,  Node: Diagnostics,  Next: Grep Programs,  Prev: Invoking,  Up: Top

Diagnostics
***********

   Normally, exit status is 0 if matches were found, and 1 if no matches
were found (the `-v' option inverts the sense of the exit status).
Exit status is 2  if  there  were  syntax errors  in  the  pattern,
inaccessible input files, or other system errors.


File: grep.info,  Node: Grep Programs,  Next: Regular Expressions,  Prev: Diagnostics,  Up: Top

GREP programs
*************

   GREP searches the named input files (or standard input if no files
are named, or the file name `-' is given) for lines containing a match
to the given pattern.  By default, GREP prints the matching lines.
There are three major variants of GREP, controlled by the following
options.

`-G'
`--basic-regexp'
     Interpret pattern as a basic  regular  expression.  This is the
     default.

`-E'

`--extended-regexp'
     Interpret pattern as  an  extended  regular  expression.

`-F'
`--fixed-strings'
     Interpret pattern as a list of fixed strings, separated by
     newlines, any of which is to be matched.

   In addition, two variant programs EGREP and FGREP are available.
EGREP is similar (but not identical) to `grep -E', and is compatible
with the historical Unix EGREP.  FGREP is  the same as `grep -F'.


File: grep.info,  Node: Regular Expressions,  Next: Reporting Bugs,  Prev: Grep Programs,  Up: Top

Regular Expressions
*******************

   A "regular expression" is a pattern that describes  a  set  of
strings.  Regular expressions are constructed analogously to arithmetic
expressions, by using various operators  to  combine smaller
expressions.  GREP understands two different versions of  regular
expression syntax:   "basic"  and  "extended".  In GNU GREP, there is no
difference  in  available  functionality  using either  syntax.  In
other  implementations,  basic regular expressions are less powerful.
The  following  description applies  to  extended  regular  expressions;
differences for basic regular expressions are summarized afterwards.

   The fundamental building blocks are the regular  expressions that
match a single character.  Most characters, including all letters and
digits, are regular expressions  that  match themselves.  Any
metacharacter with special meaning may be quoted by preceding it with a
backslash.  A list of characters enclosed by `[' and `]' matches any
single character in that list; if the first character of the list is the
caret `^', then it matches any character *not* in the list.  For
example, the regular expression `[0123456789]' matches any single digit.
A range of ASCII characters  may be  specified  by  giving  the  first
and  last characters, separated by a hyphen.  Finally, certain  named
classes  of characters  are  predefined.   Their names are self
explanatory, and  they  are :

`[:alnum:]'
     Any of [:digit:] or [:alpha:]

`[:alpha:]'
     Any local-specific or one of the ASCII letters:
     `a b c d e f g h i j k l m n o p q r s t u v w x y z',
     `A B C D E F G H I J K L M N O P Q R S T U V W X Y Z'.

`[:cntrl:]'
     Any of `BEL', `BS', `CR', `FF', `HT', `NL', or `VT'.

`[:digit:]'
     Any one of `0 1 2 3 4 5 6 7 8 9'.

`[:graph:]'
     Anything that is not a `[:alphanum:]' or `[:punct:]'.

`[:lower:]'
     Any one of `a b c d e f g h i j k l m n o p q r s t u v w x y z'.

`[:print:]'
     Any character from the `[:space:]' class, and any character that is
     *not* in the `[:isgraph:]' class.

`[:punct:]'
     Any one of `! " #% & ' ( ) ; < = > ? [ \ ] * + , - . / : ^ _ { |
     }'.

`[:space:]'
     Any one of `CR FF HT NL VT SPACE'.

`[:upper:]'
     Any one of `A B C D E F G H I J K L M N O P Q R S T U V W X Y Z'.

`[:xdigit:]'
     Any one of `a b c d e f A B C D E F 0 1 2 3 4 5 6 7 8 9'.

   For example, `[[:alnum:]]' means `[0-9A-Za-z]', except the latter
form is dependent upon the ASCII character  encoding,  whereas  the
former  is portable.  (Note that the brackets in these class names are
part of the symbolic names, and must  be  included in  addition  to the
brackets delimiting the bracket list).  Most metacharacters lose their
special meaning inside lists.  To include a literal `]', place it first
in the list.  Similarly, to include a literal `^', place it anywhere
but  first.  Finally, to include a literal `-', place it last.

   The period `.' matches any single character.  The symbol `\w' is a
synonym for `[[:alnum:]]' and `\W' is a synonym for `[^[:alnum]]'.

   The caret `^' and the dollar sign `$' are metacharacters that
respectively match the empty string at the beginning and end of a line.
The symbols `\<' and  `\>' respectively match the empty string at the
beginning and end of a word.  The symbol `\b' matches the empty string
at the edge of a  word,  and  `\B' matches  the empty string provided
it's not at the edge of a word.

   A regular expression may  be  followed  by  one  of  several
repetition operators:

`?'
     The preceding item is optional and will be matched at most once.

`*'
     The preceding item will be matched zero or more times.

`+'
     The preceding item will be matched one or more times.

`{N}'
     The preceding item is matched exactly N times.

`{N,}'
     The preceding item is matched n or more times.

`{,M}'
     The preceding item is optional and is matched at most M times.

`{N,M}'
     The preceding item is matched at least N times, but not more than
     M times.

   Two regular expressions may be concatenated;  the  resulting regular
expression matches any string formed by concatenating two substrings
that respectively match the  concatenated subexpressions.

   Two regular expressions may be joined by the infix  operator `|'; the
resulting  regular  expression  matches  any string matching either
subexpression.

   Repetition takes precedence  over  concatenation,  which  in turn
takes precedence over alternation.  A whole subexpression may be
enclosed in parentheses to override  these  precedence rules.

   The backreference `\N', where N is a single digit, matches the
substring previously matched by the Nth parenthesized subexpression of
the regular expression.

   In basic regular expressions the metacharacters `?', `+', `{', `|',
`(', and `)' lose their special meaning; instead use the backslashed
versions `\?', `\+', `\{', `\|', `\(', and `\)'.

   In EGREP the metacharacter  `{'  loses  its  special  meaning;
instead use `\{'.  This not true for `grep -E'.


File: grep.info,  Node: Reporting Bugs,  Next: Concept Index,  Prev: Regular Expressions,  Up: Top

Reporting bugs
**************

   Email bug reports to <bug-gnu-utils@gnu.org>.  Be sure to include
the word "grep" somewhere in the "Subject:" field.

   Large repetition counts in the  `{m,n}'  construct  may  cause GREP
to  use  lots  of  memory.  In addition, certain other obscure regular
expressions  require  exponential  time  and space, and may cause grep
to run out of memory.  Backreferences are very slow, and  may  require
exponential time.


File: grep.info,  Node: Concept Index,  Next: Index,  Prev: Reporting Bugs,  Up: Top

Concept Index
*************

   This is a general index of all issues discussed in this manual, with
the exception of the GREP commands and command-line options.

* Menu:

* after context:                         Invoking.
* alphabetic characters:                 Regular Expressions.
* alphanumeric characters:               Regular Expressions.
* asterisk:                              Regular Expressions.
* basic regular expressions:             Regular Expressions.
* before context:                        Invoking.
* binary files:                          Invoking.
* binary files, DOS/Windows:             Invoking.
* braces, first argument omitted:        Regular Expressions.
* braces, one argument:                  Regular Expressions.
* braces, second argument omitted:       Regular Expressions.
* braces, two arguments:                 Regular Expressions.
* Bugs, reporting:                       Reporting Bugs.
* byte offset:                           Invoking.
* byte offsets, on DOS/Windows:          Invoking.
* case insensitive search:               Invoking.
* case insensitive search, obsolete option: Invoking.
* character classes:                     Regular Expressions.
* classes of characters:                 Regular Expressions.
* context:                               Invoking.
* context lines, after match:            Invoking.
* context lines, before match:           Invoking.
* control characters:                    Regular Expressions.
* counting lines:                        Invoking.
* digit characters:                      Regular Expressions.
* directory search:                      Invoking.
* DOS byte offsets:                      Invoking.
* DOS/Windows binary files:              Invoking.
* files which don't match:               Invoking.
* graphic characters:                    Regular Expressions.
* hexadecimal digits:                    Regular Expressions.
* line numbering:                        Invoking.
* lower-case alphabetic characters:      Regular Expressions.
* match sub-expression at most m times:  Regular Expressions.
* match sub-expression at most once:     Regular Expressions.
* match sub-expression n or more times:  Regular Expressions.
* match sub-expression n times:          Regular Expressions.
* match sub-expression zero or more times: Regular Expressions.
* match the whole line:                  Invoking.
* matching basic regular expressions:    Grep Programs.
* matching extended regular expressions: Grep Programs.
* matching fixed strings:                Grep Programs.
* matching whole words:                  Invoking.
* names of matching files:               Invoking.
* no filename prefix:                    Invoking.
* numeric characters:                    Regular Expressions.
* pattern from file:                     Invoking.
* pattern list:                          Invoking.
* plus sign:                             Regular Expressions.
* print non-matching lines:              Invoking.
* printable characters:                  Regular Expressions.
* punctuation characters:                Regular Expressions.
* question mark:                         Regular Expressions.
* quiet, silent:                         Invoking.
* recursive search:                      Invoking.
* regular expressions:                   Regular Expressions.
* revert matching:                       Invoking.
* searching directory trees:             Invoking.
* Searching for a pattern.:              Introduction.
* space characters:                      Regular Expressions.
* suppress binary data:                  Invoking.
* suppress error messages:               Invoking.
* upper-case alphabetic characters:      Regular Expressions.
* Usage summary, printing:               Invoking.
* Version, printing:                     Invoking.
* whitespace characters:                 Regular Expressions.
* xdigit class:                          Regular Expressions.


File: grep.info,  Node: Index,  Prev: Concept Index,  Up: Top

Index
*****

   This is an alphabetical list of all GREP commands and command-line
options.

* Menu:

* *:                                     Regular Expressions.
* +:                                     Regular Expressions.
* --after-context:                       Invoking.
* --basic-regexp:                        Grep Programs.
* --before-context:                      Invoking.
* --binary:                              Invoking.
* --byte-offset:                         Invoking.
* --context:                             Invoking.
* --directories:                         Invoking.
* --extended-regexp:                     Grep Programs.
* --file:                                Invoking.
* --files-with-matches:                  Invoking.
* --files-without-match:                 Invoking.
* --fixed-strings:                       Grep Programs.
* --help:                                Invoking.
* --ignore-case:                         Invoking.
* --line-number:                         Invoking.
* --line-regexp:                         Invoking.
* --no-filename:                         Invoking.
* --no-messages:                         Invoking.
* --quiet:                               Invoking.
* --recursive:                           Invoking.
* --regexp=PATTERN:                      Invoking.
* --revert-match:                        Invoking.
* --silent:                              Invoking.
* --text:                                Invoking.
* --unix-byte-offsets:                   Invoking.
* --version:                             Invoking.
* --word-regexp:                         Invoking.
* -A:                                    Invoking.
* -a:                                    Invoking.
* -b:                                    Invoking.
* -B:                                    Invoking.
* -c:                                    Invoking.
* -C:                                    Invoking.
* -count:                                Invoking.
* -d:                                    Invoking.
* -E:                                    Grep Programs.
* -e:                                    Invoking.
* -F:                                    Grep Programs.
* -f:                                    Invoking.
* -G:                                    Grep Programs.
* -h:                                    Invoking.
* -i:                                    Invoking.
* -L:                                    Invoking.
* -l:                                    Invoking.
* -n:                                    Invoking.
* -NUM:                                  Invoking.
* -q:                                    Invoking.
* -r:                                    Invoking.
* -s:                                    Invoking.
* -u:                                    Invoking.
* -U:                                    Invoking.
* -V:                                    Invoking.
* -v:                                    Invoking.
* -w:                                    Invoking.
* -x:                                    Invoking.
* -y:                                    Invoking.
* ?:                                     Regular Expressions.
* alnum:                                 Regular Expressions.
* alpha:                                 Regular Expressions.
* cntrl:                                 Regular Expressions.
* digit:                                 Regular Expressions.
* graph:                                 Regular Expressions.
* lower:                                 Regular Expressions.
* print:                                 Regular Expressions.
* punct:                                 Regular Expressions.
* space:                                 Regular Expressions.
* upper:                                 Regular Expressions.
* xdigit:                                Regular Expressions.
* {,m}:                                  Regular Expressions.
* {n,m}:                                 Regular Expressions.
* {n,}:                                  Regular Expressions.
* {n}:                                   Regular Expressions.



Tag Table:
Node: Top1091
Node: Introduction1762
Node: Invoking2270
Node: Diagnostics8602
Node: Grep Programs8974
Node: Regular Expressions9921
Node: Reporting Bugs15092
Node: Concept Index15649
Node: Index19687

End Tag Table
