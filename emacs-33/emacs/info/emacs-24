This is Info file ../info/emacs, produced by Makeinfo version 1.68 from
the input file emacs.texi.

   This is the thirteenth edition of the `GNU Emacs Manual', updated
for Emacs version 20.3

INFO-DIR-SECTION Editors
START-INFO-DIR-ENTRY
* Emacs: (emacs).	The extensible self-documenting text editor.
END-INFO-DIR-ENTRY

   Published by the Free Software Foundation 59 Temple Place, Suite 330
Boston, MA  02111-1307 USA

   Copyright (C) 1985, 1986, 1987, 1993, 1994, 1995, 1996, 1997, 1998
Free Software Foundation, Inc.

   Permission is granted to make and distribute verbatim copies of this
manual provided the copyright notice and this permission notice are
preserved on all copies.

   Permission is granted to copy and distribute modified versions of
this manual under the conditions for verbatim copying, provided also
that the sections entitled "The GNU Manifesto", "Distribution" and "GNU
General Public License" are included exactly as in the original, and
provided that the entire resulting derived work is distributed under the
terms of a permission notice identical to this one.

   Permission is granted to copy and distribute translations of this
manual into another language, under the above conditions for modified
versions, except that the sections entitled "The GNU Manifesto",
"Distribution" and "GNU General Public License" may be included in a
translation approved by the Free Software Foundation instead of in the
original English.


File: emacs,  Node: Command Arguments,  Next: Antinews,  Prev: Service,  Up: Top

Command Line Arguments
**********************

   GNU Emacs supports command line arguments to request various actions
when invoking Emacs.  These are for compatibility with other editors and
for sophisticated activities.  We don't recommend using them for
ordinary editing.

   Arguments starting with `-' are "options".  Other arguments specify
files to visit.  Emacs visits the specified files while it starts up.
The last file name on your command line becomes the current buffer; the
other files are also present in other buffers.  As usual, the special
argument `--' says that all subsequent arguments are file names, not
options, even if they start with `-'.

   Emacs command options can specify many things, such as the size and
position of the X window Emacs uses, its colors, and so on.  A few
options support advanced usage, such as running Lisp functions on files
in batch mode.  The sections of this chapter describe the available
options, arranged according to their purpose.

   There are two ways of writing options: the short forms that start
with a single `-', and the long forms that start with `--'.  For
example, `-d' is a short form and `--display' is the corresponding long
form.

   The long forms with `--' are easier to remember, but longer to type.
However, you don't have to spell out the whole option name; any
unambiguous abbreviation is enough.  When a long option takes an
argument, you can use either a space or an equal sign to separate the
option name and the argument.  Thus, you can write either `--display
sugar-bombs:0.0' or `--display=sugar-bombs:0.0'.  We recommend an equal
sign because it makes the relationship clearer, and the tables below
always show an equal sign.

   Most options specify how to initialize Emacs, or set parameters for
the Emacs session.  We call them "initial options".  A few options
specify things to do: for example, load libraries, call functions, or
exit Emacs.  These are called "action options".  These and file names
together are called "action arguments".  Emacs processes all the action
arguments in the order they are written.

* Menu:

* Action Arguments::	Arguments to visit files, load libraries,
			  and call functions.
* Initial Options::     Arguments that take effect while starting Emacs.
* Command Example::     Examples of using command line arguments.
* Resume Arguments::	Specifying arguments when you resume a running Emacs.
* Environment::         Environment variables that Emacs uses.

* Display X::           Changing the default display and using remote login.
* Font X::	        Choosing a font for text, under X.
* Colors X::	        Choosing colors, under X.
* Window Size X::       Start-up window size, under X.
* Borders X::	        Internal and external borders, under X.
* Title X::             Specifying the initial frame's title.
* Icons X::             Choosing what sort of icon to use, under X.
* Resources X::         Advanced use of classes and resources, under X.
* Lucid Resources::     X resources for Lucid menus.
* Motif Resources::     X resources for Motif menus.


File: emacs,  Node: Action Arguments,  Next: Initial Options,  Up: Command Arguments

Action Arguments
================

   Here is a table of the action arguments and options:

`FILE'
     Visit FILE using `find-file'.  *Note Visiting::.

`+LINENUM FILE'
     Visit FILE using `find-file', then go to line number LINENUM in it.

`-l FILE'
`--load=FILE'
     Load a Lisp library named FILE with the function `load'.  *Note
     Lisp Libraries::.  The library can be found either in the current
     directory, or in the Emacs library search path as specified with
     `EMACSLOADPATH' (*note General Variables::.).

`-f FUNCTION'
`--funcall=FUNCTION'
     Call Lisp function FUNCTION with no arguments.

`--eval EXPRESSION'
     Evaluate Lisp expression EXPRESSION.

`--insert=FILE'
     Insert the contents of FILE into the current buffer.  This is like
     what `M-x insert-file' does.  *Note Misc File Ops::.

`--kill'
     Exit from Emacs without asking for confirmation.

   The init file can access the values of the action arguments as the
elements of a list in the variable `command-line-args'.  The init file
can override the normal processing of the action arguments, or define
new ones, by reading and setting this variable.


File: emacs,  Node: Initial Options,  Next: Command Example,  Prev: Action Arguments,  Up: Command Arguments

Initial Options
===============

   The initial options specify parameters for the Emacs session.  This
section describes the more general initial options; some other options
specifically related to X Windows appear in the following sections.

   Some initial options affect the loading of init files.  The normal
actions of Emacs are to first load `site-start.el' if it exists, then
your own init file `~/.emacs' if it exists, and finally `default.el' if
it exists; certain options prevent loading of some of these files or
substitute other files for them.

`-t DEVICE'
`--terminal=DEVICE'
     Use DEVICE as the device for terminal input and output.

`-d DISPLAY'
`--display=DISPLAY'
     Use the X Window System and use the display named DISPLAY to open
     the initial Emacs frame.

`-nw'
`--no-windows'
     Don't communicate directly with X, disregarding the `DISPLAY'
     environment variable even if it is set.

`-batch'
`--batch'
     Run Emacs in "batch mode", which means that the text being edited
     is not displayed and the standard terminal interrupt characters
     such as `C-z' and `C-c' continue to have their normal effect.
     Emacs in batch mode outputs to `stderr' only what would normally
     be printed in the echo area under program control.

     Batch mode is used for running programs written in Emacs Lisp from
     shell scripts, makefiles, and so on.  Normally the `-l' option or
     `-f' option will be used as well, to invoke a Lisp program to do
     the batch processing.

     `-batch' implies `-q' (do not load an init file).  It also causes
     Emacs to kill itself after all command options have been
     processed.  In addition, auto-saving is not done except in buffers
     for which it has been explicitly requested.

`-q'
`--no-init-file'
     Do not load your Emacs init file `~/.emacs', or `default.el'
     either.

`--no-site-file'
     Do not load `site-start.el'.  The options `-q', `-u' and `-batch'
     have no effect on the loading of this file--this is the only
     option that blocks it.

`-u USER'
`--user=USER'
     Load USER's Emacs init file `~USER/.emacs' instead of your own.

`--debug-init'
     Enable the Emacs Lisp debugger for errors in the init file.

`--unibyte'
     Set up to do almost everything with single-byte buffers and
     strings.  All buffers and strings are unibyte unless you (or a
     Lisp program) explicitly ask for a multibyte buffer or string.
     Setting the environment variable `EMACS_UNIBYTE' has the same
     effect.

`--multibyte'
     Inhibit the effect of `EMACS_UNIBYTE', so that Emacs uses
     multibyte characters by default, as usual.


File: emacs,  Node: Command Example,  Next: Resume Arguments,  Prev: Initial Options,  Up: Command Arguments

Command Argument Example
========================

   Here is an example of using Emacs with arguments and options.  It
assumes you have a Lisp program file called `hack-c.el' which, when
loaded, performs some useful operation on the current buffer, expected
to be a C program.

     emacs -batch foo.c -l hack-c -f save-buffer >& log

This says to visit `foo.c', load `hack-c.el' (which makes changes in
the visited file), save `foo.c' (note that `save-buffer' is the
function that `C-x C-s' is bound to), and then exit back to the shell
(because of `-batch').  `-batch' also guarantees there will be no
problem redirecting output to `log', because Emacs will not assume that
it has a display terminal to work with.


File: emacs,  Node: Resume Arguments,  Next: Environment,  Prev: Command Example,  Up: Command Arguments

Resuming Emacs with Arguments
=============================

   You can specify action arguments for Emacs when you resume it after
a suspension.  To prepare for this, put the following code in your
`.emacs' file (*note Hooks::.):

     (add-hook 'suspend-hook 'resume-suspend-hook)
     (add-hook 'suspend-resume-hook 'resume-process-args)

   As further preparation, you must execute the shell script
`emacs.csh' (if you use csh as your shell) or `emacs.bash' (if you use
bash as your shell).  These scripts define an alias named `edit', which
will resume Emacs giving it new command line arguments such as files to
visit.

   Only action arguments work properly when you resume Emacs.  Initial
arguments are not recognized--it's too late to execute them anyway.

   Note that resuming Emacs (with or without arguments) must be done
from within the shell that is the parent of the Emacs job.  This is why
`edit' is an alias rather than a program or a shell script.  It is not
possible to implement a resumption command that could be run from other
subjobs of the shell; no way to define a command that could be made the
value of `EDITOR', for example.  Therefore, this feature does not take
the place of the Emacs Server feature (*note Emacs Server::.).

   The aliases use the Emacs Server feature if you appear to have a
server Emacs running.  However, they cannot determine this with complete
accuracy.  They may think that a server is still running when in
actuality you have killed that Emacs, because the file `/tmp/.esrv...'
still exists.  If this happens, find that file and delete it.


File: emacs,  Node: Environment,  Next: Display X,  Prev: Resume Arguments,  Up: Command Arguments

Environment Variables
=====================

   This appendix describes how Emacs uses environment variables.  An
environment variable is a string passed from the operating system to
Emacs, and the collection of environment variables is known as the
environment.  Environment variable names are case sensitive and it is
conventional to use upper case letters only.

   Because environment variables come from the operating system there
is no general way to set them; it depends on the operating system and
especially the shell that you are using.  For example, here's how to set
the environment variable `ORGANIZATION' to `not very much' using bash:

     export ORGANIZATION="not very much"

and here's how to do it in csh or tcsh:

     setenv ORGANIZATION "not very much"

   When Emacs is set-up to use the X windowing system, it inherits the
use of a large number of environment variables from the X library.  See
the X documentation for more information.

* Menu:

* General Variables::   Environment variables that all versions of Emacs use.
* Misc Variables::      Certain system-specific variables.


File: emacs,  Node: General Variables,  Next: Misc Variables,  Up: Environment

General Variables
-----------------

`AUTHORCOPY'
     The name of a file used to archive news articles posted with the
     GNUS package.

`CDPATH'
     Used by the `cd' command to search for the directory you specify,
     when you specify a relative directory name.

`DOMAINNAME'
     The name of the Internet domain that the machine running Emacs is
     located in.  Used by the GNUS package.

`EMACS_UNIBYTE'
     Defining this environment variable directs Emacs to do almost
     everything with single-byte buffers and strings.  It is equivalent
     to using the `--unibyte' command-line option on each invocation.
     *Note Initial Options::.

`EMACSDATA'
     Used to initialize the variable `data-directory' used to locate the
     architecture-independent files that come with Emacs.  Setting this
     variable overrides the setting in `paths.h' when Emacs was built.

`EMACSLOADPATH'
     A colon-separated list of directories from which to load Emacs Lisp
     files.  Setting this variable overrides the setting in `paths.h'
     when Emacs was built.

`EMACSLOCKDIR'
     The directory that Emacs places lock files--files used to protect
     users from editing the same files simultaneously.  Setting this
     variable overrides the setting in `paths.h' when Emacs was built.

`EMACSPATH'
     The location of Emacs-specific binaries.  Setting this variable
     overrides the setting in `paths.h' when Emacs was built.

`ESHELL'
     Used for shell-mode to override the `SHELL' environment variable.

`HISTFILE'
     The name of the file that shell commands are saved in between
     logins.  This variable defaults to `~/.history' if you use (t)csh
     as shell, to `~/.bash_history' if you use bash, to `~/.sh_history'
     if you use ksh, and to `~/.history' otherwise.

`HOME'
     The location of the user's files in the directory tree; used for
     expansion of file names starting with a tilde (`~').  On MS-DOS, it
     defaults to the directory from which Emacs was started, with `/bin'
     removed from the end if it was present.

`HOSTNAME'
     The name of the machine that Emacs is running on.

`INCPATH'
     A colon-separated list of directories.  Used by the `complete'
     package to search for files.

`INFOPATH'
     A colon-separated list of directories holding info files.  Setting
     this variable overrides the setting in `paths.el' when Emacs was
     built.

`LANG'
`LC_ALL'
`LC_CTYPE'
     The user's preferred locale.  A locale name which contains
     `8859-N', `8859_N' or `8859N' automatically specifies the
     `Latin-N' language environment when Emacs starts up.

`LOGNAME'
     The user's login name.  See also `USER'.

`MAIL'
     The name of the user's system mail inbox.

`MAILRC'
     Name of file containing mail aliases.  This defaults to
     `~/.mailrc'.

`MH'
     Name of setup file for the mh system.  This defaults to
     `~/.mh_profile'.

`NAME'
     The real-world name of the user.

`NNTPSERVER'
     The name of the news server.  Used by the mh and GNUS packages.

`ORGANIZATION'
     The name of the organization to which you belong.  Used for
     setting the `Organization:' header in your posts from the GNUS
     package.

`PATH'
     A colon-separated list of directories in which executables reside.
     (On MS-DOS, it is semicolon-separated instead.)  This variable is
     used to set the Emacs Lisp variable `exec-path' which you should
     consider to use instead.

`PWD'
     If set, this should be the default directory when Emacs was
     started.

`REPLYTO'
     If set, this specifies an initial value for the variable
     `mail-default-reply-to'.  *Note Mail Headers::.

`SAVEDIR'
     The name of a directory in which news articles are saved by
     default.  Used by the GNUS package.

`SHELL'
     The name of an interpreter used to parse and execute programs run
     from inside Emacs.

`TERM'
     The name of the terminal that Emacs is running on.  The variable
     must be set unless Emacs is run in batch mode.  On MS-DOS, it
     defaults to `internal', which specifies a built-in terminal
     emulation that handles the machine's own display.

`TERMCAP'
     The name of the termcap library file describing how to program the
     terminal specified by the `TERM' variable.  This defaults to
     `/etc/termcap'.

`TMPDIR'
     Used by the Emerge package as a prefix for temporary files.

`TZ'
     This specifies the current time zone and possibly also daylight
     savings information.  On MS-DOS, the default is based on country
     code; see the file `msdos.c' for details.

`USER'
     The user's login name.  See also `LOGNAME'.  On MS-DOS, this
     defaults to `root'.

`VERSION_CONTROL'
     Used to initialize the `version-control' variable (*note Backup
     Names::.).


File: emacs,  Node: Misc Variables,  Prev: General Variables,  Up: Environment

Miscellaneous Variables
-----------------------

   These variables are used only on particular configurations:

`COMSPEC'
     On MS-DOS, the name of the command interpreter to use.  This is
     used to make a default value for the `SHELL' environment variable.

`NAME'
     On MS-DOS, this variable defaults to the value of the `USER'
     variable.

`TEMP'
`TMP'
     On MS-DOS, these specify the name of the directory for storing
     temporary files in.

`EMACSTEST'
     On MS-DOS, this specifies a file to use to log the operation of the
     internal terminal emulator.  This feature is useful for submitting
     bug reports.

`EMACSCOLORS'
     Used on MS-DOS systems to set screen colors early, so that the
     screen won't momentarily flash the default colors when Emacs
     starts up.  The value of this variable should be two-character
     encoding of the foreground (the first character) and the
     background (the second character) colors of the default face.
     Each character should be the hexadecimal code for the desired
     color on a standard PC text-mode display.

     Only the low three bits of the background color are actually used,
     because the PC display supports only eight background colors.

`WINDOW_GFX'
     Used when initializing the Sun windows system.


File: emacs,  Node: Display X,  Next: Font X,  Prev: Environment,  Up: Command Arguments

Specifying the Display Name
===========================

   The environment variable `DISPLAY' tells all X clients, including
Emacs, where to display their windows.  Its value is set up by default
in ordinary circumstances, when you start an X server and run jobs
locally.  Occasionally you may need to specify the display yourself; for
example, if you do a remote login and want to run a client program
remotely, displaying on your local screen.

   With Emacs, the main reason people change the default display is to
let them log into another system, run Emacs on that system, but have the
window displayed at their local terminal.  You might need to use login
to another system because the files you want to edit are there, or
because the Emacs executable file you want to run is there.

   The syntax of the `DISPLAY' environment variable is
`HOST:DISPLAY.SCREEN', where HOST is the host name of the X Window
System server machine, DISPLAY is an arbitrarily-assigned number that
distinguishes your server (X terminal) from other servers on the same
machine, and SCREEN is a rarely-used field that allows an X server to
control multiple terminal screens.  The period and the SCREEN field are
optional.  If included, SCREEN is usually zero.

   For example, if your host is named `glasperle' and your server is
the first (or perhaps the only) server listed in the configuration, your
`DISPLAY' is `glasperle:0.0'.

   You can specify the display name explicitly when you run Emacs,
either by changing the `DISPLAY' variable, or with the option `-d
DISPLAY' or `--display=DISPLAY'.  Here is an example:

     emacs --display=glasperle:0 &

   You can inhibit the direct use of X with the `-nw' option.  This is
also an initial option.  It tells Emacs to display using ordinary ASCII
on its controlling terminal.

   Sometimes, security arrangements prevent a program on a remote system
from displaying on your local system.  In this case, trying to run Emacs
produces messages like this:

     Xlib:  connection to "glasperle:0.0" refused by server

You might be able to overcome this problem by using the `xhost' command
on the local system to give permission for access from your remote
machine.


File: emacs,  Node: Font X,  Next: Colors X,  Prev: Display X,  Up: Command Arguments

Font Specification Options
==========================

   By default, Emacs displays text in the font named `9x15', which
makes each character nine pixels wide and fifteen pixels high.  You can
specify a different font on your command line through the option `-fn
NAME'.

`-fn NAME'
     Use font NAME as the default font.

`--font=NAME'
     `--font' is an alias for `-fn'.

   Under X, each font has a long name which consists of eleven words or
numbers, separated by dashes.  Some fonts also have shorter
nicknames--`9x15' is such a nickname.  You can use either kind of name.
You can use wildcard patterns for the font name; then Emacs lets X
choose one of the fonts that match the pattern.  Here is an example,
which happens to specify the font whose nickname is `6x13':

     emacs -fn "-misc-fixed-medium-r-semicondensed--13-*-*-*-c-60-iso8859-1" &

You can also specify the font in your `.Xdefaults' file:

     emacs.font: -misc-fixed-medium-r-semicondensed--13-*-*-*-c-60-iso8859-1

   A long font name has the following form:

     -MAKER-FAMILY-WEIGHT-SLANT-WIDTHTYPE-STYLE...
     ...-PIXELS-HEIGHT-HORIZ-VERT-SPACING-WIDTH-CHARSET

FAMILY
     This is the name of the font family--for example, `courier'.

WEIGHT
     This is normally `bold', `medium' or `light'.  Other words may
     appear here in some font names.

SLANT
     This is `r' (roman), `i' (italic), `o' (oblique), `ri' (reverse
     italic), or `ot' (other).

WIDTHTYPE
     This is normally `condensed', `extended', `semicondensed' or
     `normal'.  Other words may appear here in some font names.

STYLE
     This is an optional additional style name.  Usually it is
     empty--most long font names have two hyphens in a row at this
     point.

PIXELS
     This is the font height, in pixels.

HEIGHT
     This is the font height on the screen, measured in tenths of a
     printer's point--approximately 1/720 of an inch.  In other words,
     it is the point size of the font, times ten.  For a given vertical
     resolution, HEIGHT and PIXELS are proportional; therefore, it is
     common to specify just one of them and use `*' for the other.

HORIZ
     This is the horizontal resolution, in pixels per inch, of the
     screen for which the font is intended.

VERT
     This is the vertical resolution, in dots per inch, of the screen
     for which the font is intended.  Normally the resolution of the
     fonts on your system is the right value for your screen;
     therefore, you normally specify `*' for this and HORIZ.

SPACING
     This is `m' (monospace), `p' (proportional) or `c' (character
     cell).  Emacs can use `m' and `c' fonts.

WIDTH
     This is the average character width, in pixels, multiplied by ten.

CHARSET
     This is the character set that the font depicts.  Normally you
     should use `iso8859-1'.

   Use only fixed-width fonts--that is, fonts in which all characters
have the same width; Emacs cannot yet handle display properly for
variable-width fonts.  Any font with `m' or `c' in the SPACING field of
the long name is a fixed-width font.  Here's how to use the `xlsfonts'
program to list all the fixed-width fonts available on your system:

     xlsfonts -fn '*x*'
     xlsfonts -fn '*-*-*-*-*-*-*-*-*-*-*-m*'
     xlsfonts -fn '*-*-*-*-*-*-*-*-*-*-*-c*'

To see what a particular font looks like, use the `xfd' command.  For
example:

     xfd -fn 6x13

displays the entire font `6x13'.

   While running Emacs, you can set the font of the current frame
(*note Frame Parameters::.) or for a specific kind of text (*note
Faces::.).


File: emacs,  Node: Colors X,  Next: Window Size X,  Prev: Font X,  Up: Command Arguments

Window Color Options
====================

   On a color display, you can specify which color to use for various
parts of the Emacs display.  To find out what colors are available on
your system, look at the `/usr/lib/X11/rgb.txt' file.  If you do not
specify colors, the default for the background is white and the default
for all other colors is black.  On a monochrome display, the foreground
is black, the background is white, and the border is gray if the
display supports that.

   Here is a list of the options for specifying colors:

`-fg COLOR'
`--foreground-color=COLOR'
     Specify the foreground color.

`-bg COLOR'
`--background-color=COLOR'
     Specify the background color.

`-bd COLOR'
`--border-color=COLOR'
     Specify the color of the border of the X window.

`-cr COLOR'
`--cursor-color=COLOR'
     Specify the color of the Emacs cursor which indicates where point
     is.

`-ms COLOR'
`--mouse-color=COLOR'
     Specify the color for the mouse cursor when the mouse is in the
     Emacs window.

`-r'
`--reverse-video'
     Reverse video--swap the foreground and background colors.

   For example, to use a coral mouse cursor and a slate blue text
cursor, enter:

     emacs -ms coral -cr 'slate blue' &

   You can reverse the foreground and background colors through the
`-r' option or with the X resource `reverseVideo'.


File: emacs,  Node: Window Size X,  Next: Borders X,  Prev: Colors X,  Up: Command Arguments

Options for Window Geometry
===========================

   The `-geometry' option controls the size and position of the initial
Emacs frame.  Here is the format for specifying the window geometry:

`-g WIDTHxHEIGHT{+-}XOFFSET{+-}YOFFSET'
     Specify window size WIDTH and HEIGHT (measured in character
     columns and lines), and positions XOFFSET and YOFFSET (measured in
     pixels).

`--geometry=WIDTHxHEIGHT{+-}XOFFSET{+-}YOFFSET'
     This is another way of writing the same thing.

`{+-}' means either a plus sign or a minus sign.  A plus sign before
XOFFSET means it is the distance from the left side of the screen; a
minus sign means it counts from the right side.  A plus sign before
YOFFSET means it is the distance from the top of the screen, and a
minus sign there indicates the distance from the bottom.  The values
XOFFSET and YOFFSET may themselves be positive or negative, but that
doesn't change their meaning, only their direction.

   Emacs uses the same units as `xterm' does to interpret the geometry.
The WIDTH and HEIGHT are measured in characters, so a large font
creates a larger frame than a small font.  The XOFFSET and YOFFSET are
measured in pixels.

   Since the mode line and the echo area occupy the last 2 lines of the
frame, the height of the initial text window is 2 less than the height
specified in your geometry.  In non-X-toolkit versions of Emacs, the
menu bar also takes one line of the specified number.

   You do not have to specify all of the fields in the geometry
specification.

   If you omit both XOFFSET and YOFFSET, the window manager decides
where to put the Emacs frame, possibly by letting you place it with the
mouse.  For example, `164x55' specifies a window 164 columns wide,
enough for two ordinary width windows side by side, and 55 lines tall.

   The default width for Emacs is 80 characters and the default height
is 40 lines.  You can omit either the width or the height or both.  If
you start the geometry with an integer, Emacs interprets it as the
width.  If you start with an `x' followed by an integer, Emacs
interprets it as the height.  Thus, `81' specifies just the width;
`x45' specifies just the height.

   If you start with `+' or `-', that introduces an offset, which means
both sizes are omitted.  Thus, `-3' specifies the XOFFSET only.  (If
you give just one offset, it is always XOFFSET.)  `+3-3' specifies both
the XOFFSET and the YOFFSET, placing the frame near the bottom left of
the screen.

   You can specify a default for any or all of the fields in
`.Xdefaults' file, and then override selected fields with a
`--geometry' option.


File: emacs,  Node: Borders X,  Next: Title X,  Prev: Window Size X,  Up: Command Arguments

Internal and External Borders
=============================

   An Emacs frame has an internal border and an external border.  The
internal border is an extra strip of the background color around all
four edges of the frame.  Emacs itself adds the internal border.  The
external border is added by the window manager outside the internal
border; it may contain various boxes you can click on to move or iconify
the window.

`-ib WIDTH'

`--internal-border=WIDTH'
     Specify WIDTH as the width of the internal border.

`-bw WIDTH'

`--border-width=WIDTH'
     Specify WIDTH as the width of the main border.

   When you specify the size of the frame, that does not count the
borders.  The frame's position is measured from the outside edge of the
external border.

   Use the `-ib N' option to specify an internal border N pixels wide.
The default is 1.  Use `-bw N' to specify the width of the external
border (though the window manager may not pay attention to what you
specify).  The default width of the external border is 2.


File: emacs,  Node: Title X,  Next: Icons X,  Prev: Borders X,  Up: Command Arguments

Frame Titles
============

   An Emacs frame may or may not have a specified title.  The frame
title, if specified, appears in window decorations and icons as the name
of the frame.  If an Emacs frame has no specified title, the default
title is the name of the executable program (if there is only one frame)
or the selected window's buffer name (if there is more than one frame).

   You can specify a title for the initial Emacs frame with a command
line option:

`-title TITLE'
`--title=TITLE'
`-T TITLE'
     Specify TITLE as the title for the initial Emacs frame.

   The `--name' option (*note Resources X::.) also specifies the title
for the initial Emacs frame.


File: emacs,  Node: Icons X,  Next: Resources X,  Prev: Title X,  Up: Command Arguments

Icons
=====

   Most window managers allow the user to "iconify" a frame, removing
it from sight, and leaving a small, distinctive "icon" window in its
place.  Clicking on the icon window makes the frame itself appear again.
If you have many clients running at once, you can avoid cluttering up
the screen by iconifying most of the clients.

`-i'
`--icon-type'
     Use a picture of a gnu as the Emacs icon.

`-iconic'
`--iconic'
     Start Emacs in iconified state.

   The `-i' or `--icon-type' option tells Emacs to use an icon window
containing a picture of the GNU gnu.  If omitted, Emacs lets the window
manager choose what sort of icon to use--usually just a small rectangle
containing the frame's title.

   The `-iconic' option tells Emacs to begin running as an icon, rather
than opening a frame right away.  In this situation, the icon window
provides only indication that Emacs has started; the usual text frame
doesn't appear until you deiconify it.


File: emacs,  Node: Resources X,  Next: Lucid Resources,  Prev: Icons X,  Up: Command Arguments

X Resources
===========

   Programs running under the X Window System organize their user
options under a hierarchy of classes and resources.  You can specify
default values for these options in your X resources file, usually named
`~/.Xdefaults'.

   Each line in the file specifies a value for one option or for a
collection of related options, for one program or for several programs
(optionally even for all programs).

   Programs define named resources with particular meanings.  They also
define how to group resources into named classes.  For instance, in
Emacs, the `internalBorder' resource controls the width of the internal
border, and the `borderWidth' resource controls the width of the
external border.  Both of these resources are part of the `BorderWidth'
class.  Case distinctions are significant in these names.

   In `~/.Xdefaults', you can specify a value for a single resource on
one line, like this:

     emacs.borderWidth: 2

Or you can use a class name to specify the same value for all resources
in that class.  Here's an example:

     emacs.BorderWidth: 2

   If you specify a value for a class, it becomes the default for all
resources in that class.  You can specify values for individual
resources as well; these override the class value, for those particular
resources.  Thus, this example specifies 2 as the default width for all
borders, but overrides this value with 4 for the external border:

     emacs.Borderwidth: 2
     emacs.borderwidth: 4

   The order in which the lines appear in the file does not matter.
Also, command-line options always override the X resources file.

   The string `emacs' in the examples above is also a resource name.
It actually represents the name of the executable file that you invoke
to run Emacs.  If Emacs is installed under a different name, it looks
for resources under that name instead of `emacs'.

`-name NAME'
`--name=NAME'
     Use NAME as the resource name (and the title) for the initial
     Emacs frame.  This option does not affect subsequent frames, but
     Lisp programs can specify frame names when they create frames.

     If you don't specify this option, the default is to use the Emacs
     executable's name as the resource name.

`-xrm RESOURCE-VALUES'
`--xrm=RESOURCE-VALUES'
     Specify X resource values for this Emacs job (see below).

   For consistency, `-name' also specifies the name to use for other
resource values that do not belong to any particular frame.

   The resources that name Emacs invocations also belong to a class; its
name is `Emacs'.  If you write `Emacs' instead of `emacs', the resource
applies to all frames in all Emacs jobs, regardless of frame titles and
regardless of the name of the executable file.  Here is an example:

     Emacs.BorderWidth: 2
     Emacs.borderWidth: 4

   You can specify a string of additional resource values for Emacs to
use with the command line option `-xrm RESOURCES'.  The text RESOURCES
should have the same format that you would use inside a file of X
resources.  To include multiple resource specifications in DATA, put a
newline between them, just as you would in a file.  You can also use
`#include "FILENAME"' to include a file full of resource
specifications.  Resource values specified with `-xrm' take precedence
over all other resource specifications.

   The following table lists the resource names that designate options
for Emacs, each with the class that it belongs to:

`background' (class `Background')
     Background color name.

`bitmapIcon' (class `BitmapIcon')
     Use a bitmap icon (a picture of a gnu) if `on', let the window
     manager choose an icon if `off'.

`borderColor' (class `BorderColor')
     Color name for the external border.

`borderWidth' (class `BorderWidth')
     Width in pixels of the external border.

`cursorColor' (class `Foreground')
     Color name for text cursor (point).

`font' (class `Font')
     Font name for text (or fontset name, *note Fontsets::.).

`foreground' (class `Foreground')
     Color name for text.

`geometry' (class `Geometry')
     Window size and position.  Be careful not to specify this resource
     as `emacs*geometry', because that may affect individual menus as
     well as the Emacs frame itself.

     If this resource specifies a position, that position applies only
     to the initial Emacs frame (or, in the case of a resource for a
     specific frame name, only that frame).  However, the size if
     specified here applies to all frames.

`iconName' (class `Title')
     Name to display in the icon.

`internalBorder' (class `BorderWidth')
     Width in pixels of the internal border.

`menuBar' (class `MenuBar')
     Give frames menu bars if `on'; don't have menu bars if `off'.

`minibuffer' (class `Minibuffer')
     If `none', don't make a minibuffer in this frame.  It will use a
     separate minibuffer frame instead.

`paneFont' (class `Font')
     Font name for menu pane titles, in non-toolkit versions of Emacs.

`pointerColor' (class `Foreground')
     Color of the mouse cursor.

`reverseVideo' (class `ReverseVideo')
     Switch foreground and background default colors if `on', use
     colors as specified if `off'.

`verticalScrollBars' (class `ScrollBars')
     Give frames scroll bars if `on'; don't have scroll bars if `off'.

`selectionFont' (class `Font')
     Font name for pop-up menu items, in non-toolkit versions of Emacs.
     (For toolkit versions, see *Note Lucid Resources::, also see
     *Note Motif Resources::.)

`title' (class `Title')
     Name to display in the title bar of the initial Emacs frame.

   Here are resources for controlling the appearance of particular faces
(*note Faces::.):

`FACE.attributeFont'
     Font for face FACE.

`FACE.attributeForeground'
     Foreground color for face FACE.

`FACE.attributeBackground'
     Background color for face FACE.

`FACE.attributeUnderline'
     Underline flag for face FACE.  Use `on' or `true' for yes.


File: emacs,  Node: Lucid Resources,  Next: Motif Resources,  Prev: Resources X,  Up: Command Arguments

Lucid Menu X Resources
======================

   If the Emacs installed at your site was built to use the X toolkit
with the Lucid menu widgets, then the menu bar is a separate widget and
has its own resources.  The resource names contain `pane.menubar'
(following, as always, the name of the Emacs invocation or `Emacs'
which stands for all Emacs invocations).  Specify them like this:

     Emacs.pane.menubar.RESOURCE:  VALUE

For example, to specify the font `8x16' for the menu-bar items, write
this:

     Emacs.pane.menubar.font:  8x16

Resources for *non-menubar* toolkit pop-up menus have `menu*', in like
fashion.  For example, to specify the font `8x16' for the pop-up menu
items, write this:

     Emacs.menu*.font:	8x16

For dialog boxes, use `dialog' instead of `menu':

     Emacs.dialog*.font:	8x16

Experience shows that on some systems you may need to add `shell.'
before the `pane.menubar' or `menu*'.  On some other systems, you must
not add `shell.'.

   Here is a list of the specific resources for menu bars and pop-up
menus:

`font'
     Font for menu item text.

`foreground'
     Color of the foreground.

`background'
     Color of the background.

`buttonForeground'
     In the menu bar, the color of the foreground for a selected item.

`horizontalSpacing'
     Horizontal spacing in pixels between items.  Default is 3.

`verticalSpacing'
     Vertical spacing in pixels between items.  Default is 1.

`arrowSpacing'
     Horizontal spacing between the arrow (which indicates a submenu)
     and the associated text.  Default is 10.

`shadowThickness'
     Thickness of shadow line around the widget.


File: emacs,  Node: Motif Resources,  Prev: Lucid Resources,  Up: Command Arguments

Motif Menu X Resources
======================

   If the Emacs installed at your site was built to use the X toolkit
with the Motif widgets, then the menu bar is a separate widget and has
its own resources.  The resource names contain `pane.menubar'
(following, as always, the name of the Emacs invocation or `Emacs'
which stands for all Emacs invocations).  Specify them like this:

     Emacs.pane.menubar.SUBWIDGET.RESOURCE:  VALUE

   Each individual string in the menu bar is a subwidget; the
subwidget's name is the same as the menu item string.  For example, the
word `Files' in the menu bar is part of a subwidget named
`emacs.pane.menubar.Files'.  Most likely, you want to specify the same
resources for the whole menu bar.  To do this, use `*' instead of a
specific subwidget name.  For example, to specify the font `8x16' for
the menu-bar items, write this:

     Emacs.pane.menubar.*.fontList:  8x16

This also specifies the resource value for submenus.

   Each item in a submenu in the menu bar also has its own name for X
resources; for example, the `Files' submenu has an item named `Save
Buffer'.  A resource specification for a submenu item looks like this:

     Emacs.pane.menubar.popup_*.MENU.ITEM.RESOURCE: VALUE

For example, here's how to specify the font for the `Save Buffer' item:

     Emacs.pane.menubar.popup_*.Files.Save Buffer.fontList: 8x16

For an item in a second-level submenu, such as `Check Message' under
`Spell' under `Edit', the resource fits this template:

     Emacs.pane.menubar.popup_*.popup_*.MENU.RESOURCE: VALUE

For example,

     Emacs.pane.menubar.popup_*.popup_*.Spell.Check Message: VALUE

   It's impossible to specify a resource for all the menu-bar items
without also specifying it for the submenus as well.  So if you want the
submenu items to look different from the menu bar itself, you must ask
for that in two steps.  First, specify the resource for all of them;
then, override the value for submenus alone.  Here is an example:

     Emacs.pane.menubar.*.fontList:  8x16
     Emacs.pane.menubar.popup_*.fontList: 8x16

For toolkit pop-up menus, use `menu*' instead of `pane.menubar'.  For
example, to specify the font `8x16' for the pop-up menu items, write
this:

     Emacs.menu*.fontList:  8x16

   Here is a list of the specific resources for menu bars and pop-up
menus:

`armColor'
     The color to show in an armed button.

`fontList'
     The font to use.

`marginBottom'
`marginHeight'
`marginLeft'
`marginRight'
`marginTop'
`marginWidth'
     Amount of space to leave around the item, within the border.

`borderWidth'
     The width of border around the menu item, on all sides.

`shadowThickness'
     The width of the border shadow.

`bottomShadowColor'
     The color for the border shadow, on the bottom and the right.

`topShadowColor'
     The color for the border shadow, on the bottom and the right.


File: emacs,  Node: Antinews,  Next: MS-DOS,  Prev: Command Arguments,  Up: Top

Emacs 19 Antinews
*****************

   For those users who live backwards in time, here is information about
downgrading to Emacs version 19.  We hope you will enjoy the greater
simplicity that results from the absence of certain Emacs 20 features.

   * The multibyte character support has been eliminated entirely.
     (Some users consider this a tremendous improvement.)  Each
     character takes up one position in a buffer or string, and
     character codes are limited to the range 0 through 255.

   * Fontsets, coding systems and input methods have been eliminated as
     well.

   * The mode line normally displays the string `Emacs', in case you
     forget what editor you are using.

   * Scroll bars always appear on the right-hand side of the window.
     This clearly separates them from the text in the window.

   * The `M-x customize' feature has been replaced with a very simple
     feature, `M-x edit-options'.  This shows you *all* the user
     options right from the start, so you don't have to hunt for the
     ones you want.  It also provides a few commands, such as `s' and
     `x', to set a user option.

   * The <DELETE> key does nothing special in Emacs 19 when you use it
     after selecting a region with the mouse.  It does exactly the same
     thing in that situation as it does at all other times: delete one
     character backwards.

   * `C-x C-w' no longer changes the major mode according to the new
     file name.  If you want to change the mode, use `M-x normal-mode'.

   * In Transient Mark mode, each window displays highlighting for the
     region as it exists in that window.

   * Outline mode doesn't use overlay properties; instead, it hides a
     line by converting the preceding newline into code 015.
     Magically, however, if you save the file, the 015 character
     appears in the file as a newline.

   * There is now a clever way you can activate the minibuffer
     recursively even if `enable-recursive-minibuffers' is `nil'.  All
     you have to do is *switch windows* to a non-minibuffer window, and
     then use a minibuffer command.  You can pile up any number of
     minibuffer levels this way, but `M-x top-level' will get you out
     of all of them.

   * We have removed the limit on the length of minibuffer history
     lists; they now contain all the minibuffer arguments you have used
     since the beginning of the session.

   * Dynamic abbrev expansion now handles case conversion in a very
     simple and straightforward way.  If you have requested preserving
     case, it always converts the entire expansion to the case pattern
     of the abbrev that you have typed in.

   * The `compose-mail' command does not exist; `C-x m' now runs `mail'
     directly.

   * There is no way to quote a file name with special characters in it.
     What you see is what you get: if the name looks remote, it is
     remote.

   * `M-x grep-find' has been eliminated, because `grep' has never been
     lost.

   * Some Dired commands have been rearranged: two-character sequences
     have been replaced with quick single-character commands:

        * For `dired-mark-executables', type `*'.

        * For `dired-mark-directories', type `/'.

        * For `dired-mark-symlinks', type `@'.

        * For `dired-change-marks', type `c'.

        * For `dired-unmark-all-files', type `C-M-?'.

        * For `dired-unmark-all-marks', type `C-M-? <RET>'.

     But if you want to use `dired-flag-garbage-files', `&', you'll
     just have to stop living in the past.

   * In C mode, you can now specify your preferred style for block
     comments.  If you want to use the style

          /*
          blah
          blah
          */

     then you should set the variable `c-block-comments-indent-p' to
     `t'.

   * To customize faces used by Font Lock mode, use the variable
     `font-lock-face-attributes'.  See its documentation string for
     details.

   * For efficiency, Font Lock mode now uses by default the minimum
     supported level of decoration for the selected major mode.

   * If you kill a buffer, any registers holding saved positions in that
     buffer are changed to point into limbo.

   * The function `set-frame-font' has been renamed to
     `set-default-font'.

   * The variable `tex-main-file' doesn't exist.  Of course, you can
     create the variable by setting it, but that won't do anything
     special.

   * The `scroll-preserve-screen-position' variable has been eliminated;
     and so has the feature that it controls.

   * We have eliminated the functions `add-untranslated-filesystem' and
     `remove-untranslated-filesystem', and replaced them with a simpler
     function, `using-unix-filesystems'.

   * To keep up with decreasing computer memory capacity, many other
     functions and files have been eliminated in Emacs 19.  There's no
     need to mention them all here.  If you try to use one of them,
     you'll get an error message to tell you that it is undefined or
     unbound.


File: emacs,  Node: MS-DOS,  Next: Manifesto,  Prev: Antinews,  Up: Top

Emacs and MS-DOS
****************

   This section briefly describes the peculiarities of using Emacs under
the MS-DOS "operating system" (also known as "MS-DOG").  If you build
Emacs for MS-DOS, the binary will also run on Windows 3, Windows NT,
Windows 95, or OS-2 as a DOS application; the information in this
chapter applies for all of those systems, if you use an Emacs that was
built for MS-DOS.

   Note that it is possible to build Emacs specifically for Windows NT
or Windows 95.  If you do that, most of this chapter does not apply;
instead, you get behavior much closer to what is documented in the rest
of the manual, including support for long file names, multiple frames,
scroll bars, mouse menus, and subprocesses.  However, the section on
text files and binary files does still apply.  There are also two
sections at the end of this chapter which apply specifically for Windows
NT and 95.

* Menu:

* Input: MS-DOS Input.         Keyboard and mouse usage on MS-DOS.
* Display: MS-DOS Display.     Fonts, frames and display size on MS-DOS.
* Files: MS-DOS File Names.    File name conventions on MS-DOS.
* Text and Binary::            Text files on MS-DOS use CRLF to separate lines.
* Printing: MS-DOS Printing.   How to specify the printer on MS-DOS.
* Processes: MS-DOS Processes. Running subprocesses on MS-DOS.
* Windows Processes::          Running subprocesses on Windows.
* Windows System Menu::        Controlling what the ALT key does.

