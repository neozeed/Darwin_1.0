#!/bin/sh

set -e
vardir="$1"
method=$2
option=$3

cd "$vardir/methods/disk"
tp=/tmp/ddm$$

iarch=`dpkg --print-installation-architecture`

xit=1
trap '
	rm -f $tp.?
	if [ -n "$umount" ]
	then
		umount "$umount" >/dev/null 2>&1
	fi
	exit $xit
' 0

if ls -d "$tp.?" >/dev/null 2>&1
then
	rm $tp.?
fi

yesno () {
	while true
	do
		echo -n "$2 [$1]  "
		read response
		if [ -z "$response" ]
		then
			response="$1"
		fi
		case "$response" in
		[Nn]*)	yesno=no ; return ;;
		[Yy]*)	yesno=yes ; return ;;
		esac
	done
}

getblockdev () {
	mountpoint="$vardir/methods/mnt"
	if [ -z "$defaultdevice" ]
	then
		defaultdevice="$newdefaultdevice"
	elif [ "$defaultdevice" != "$newdefaultdevice" ]
	then
		echo \
	"前回は $defaultdevice からのインストールが選択されています。"
	fi
	promptstring="$1"
	while [ -z "$blockdevice" ]
	do
		echo -n "$promptstring [$defaultdevice]:  "
		read response
		if [ -z "$response" ]
		then
			response="$defaultdevice"
		fi
		if ! [ -b "$response" ]
		then
			echo "$response はブロックデバイスではありません。"; continue
		fi
		tryblockdevice="$response"
		if [ $option = cdrom ]
		then
			fstype=iso9660
		elif [ $option = harddisk ]
		then
			blockbase="`echo \"$tryblockdevice\" | sed -e 's/[0-9]\{1,\}$//'`"
			set +e
			echo -e "p\nq\n" | fdisk "$blockbase" 2>/dev/null >$tp.f
			set -e
			proposeddevice="$tryblockdevice" perl -ne '
next unless /^ *Device +Boot +Begin +Start +End +Blocks +Id +System *$/i .. !/\S/;
next unless s:^/\S+:: && $& eq $ENV{"proposeddevice"};
next unless s/^ +(\* +)?\d+ +\d+ +\d+ +\d+\+? +//;
next unless m/^([0-9a-f]{1,2}) /i;
%types= ( "1","msdos", "4","msdos", "6","msdos", "7","hpfs", "80","minix",
          "81","minix", "83","ext2" );
print $types{$1}; exit(0);	' <$tp.f >$tp.m
			defaultfstype="`cat $tp.m`"
			if [ -n "$defaultfstype" ]
			then
				cat <<END
$blockbase のパーティションテーブルは $tryblockdevice が $defaultfstype
ファイルシステムで構成されていると示しています。
END
				if ! grep "	$defaultfstype$" /proc/filesystems >/dev/null
				then
					echo \
	"カーネルがこのファイルシステムをサポートしていません。"
					defaultfstype=""
				fi
			fi
			echo -n "Supported filesystems: "
			sed -e 's/^.*	/ /' /proc/filesystems | tr '\n' ' '
			echo -n "
$tryblockdevice のファイルシステムのタイプは？ [$defaultfstype]: "
			read fstype
			if [ -z "$fstype" ]
			then
				fstype="$defaultfstype"
			fi
		fi
		umount="$mountpoint"
		if mount -rt "$fstype" -o nosuid,nodev "$tryblockdevice" "$mountpoint"
		then
			echo
			blockdevice="$tryblockdevice"
		else
			umount=""
			echo \
	"$tryblockdevice  を $mountpoint に $fstype 型でマウントできません。"
		fi
	done
}

outputparam () {
	echo "$2" | sed -e "s/'/'\\\\''/; s/^/$1='/; s/$/'/" >&3
}

intrkey="`stty -a | sed -n 's/.*intr = \([^;]*\);.*/\1/p'`"
echo "
途中で失敗した場合には、$intrkey で作業を中断できます。
"

# State variables, `best first'
#  {main,ctb,nf,lcl}_{packages,binary}
#   Empty before we've found them or if they're not available,
#   set to the relevant bit under mountpoint otherwise.
#  hierbase
#   A directory containing a Debian FTP site mirror tree.
#  mountpoint
#   The mountpoint for the filesystem containing the stuff
#   empty or unset if we don't know yet, or if we haven't mounted anything;
#   may also be empty if `directory' was set.
#  blockdevice
#   The actual block device to mount.
#  fstype
#   The filesystem type to use.
#  defaultdevice
#   The default block device to mount.

p_usedevel=no
if [ -f shvar.$option ]
then
	. ./shvar.$option
	defaultdevice="$p_blockdev"
	defaultnfsserver="$p_nfsserver"
	defaultnfsrempath="$p_nfsrempath"
	usedevel="$p_usedevel"
fi

if [ $option = cdrom ]
then
	mount >$tp.m
	sed -n 's/ ([^)]*)$//; s/^[^ ]* on //; s/ type iso9660$//p' <$tp.m >$tp.l
	ncdroms=`wc -l <$tp.l`
	if [ $ncdroms -gt 1 ]
	then
		response=""
		while [ -z "$response" ]
		do
			echo \
	'複数の CD-ROM (または他の ISO9660 ファイルシステム) がマウントされています。'
			egrep 'type iso9660 \([^)]*\)$' <$tp.m | nl
			echo -n \
	'この内のどれかですか？　番号 (ない場合には `n'\'') を入力して下さい。'
			read response
			response="`echo \"$response\" | sed -e 's/[ 	]*$//'`"
			if expr "$response" : '[0-9][0-9]*$' >/dev/null && \
			   [ $response -ge 1 -a $response -le $ncdroms ]
			then
				mountpoint="`sed -n $response'p' <$tp.l`"
				echo
			elif expr "$response" : '[Nn]' >/dev/null
			then
				mountpoint=""
			else
				response=""
			fi
		done
	elif [ $ncdroms = 1 ]
	then
		mountpoint="`cat $tp.l`"
		perl -ne 'print if s/ type iso9660 \([^)]*\)$// && s/ on .*$//;' \
			<$tp.m >$tp.d
		blockdevice="`cat $tp.d`"
		yesno yes \
	"CD-ROM $blockdevice が $mountpoint にマウントされています。こちらを使用しますか？"
		if [ $yesno = no ]
		then
			echo 'Unmounting it ...'
			umount="$mountpoint"
			while true
			do
				echo -n \
	'正しいディスクを挿入し、[Enter] を入力して下さい。'
				read response
				if mount -rt iso9660 -o nosuid,nodev \
					"$blockdevice" "$mountpoint"
				then
					echo
					break
				fi
			done
		fi
	fi
	if [ -z "$mountpoint" ]
	then
		if [ -b /dev/cdrom ]
		then
			echo \
	'ブロックデバイス /dev/cdrom が存在します。'
			newdefaultdevice=/dev/cdrom
		fi
		getblockdev 'CD-ROM を挿入しブロックデバイス名を入力して下さい。'
	fi
fi

if [ $option = nfs ]
then
	mountpoint="$vardir/methods/mnt"
	while [ -z "$nfsserver" ]
	do
		echo -n \
	"NFS サーバ名を入力して下さい。 [$defaultnfsserver]  "
		read response
		if [ -z "$response" -a -n "$defaultnfsserver" ]
		then
			response="$defaultnfsserver"
		fi
		if [ -z "$response" ]; then continue; fi
		if [ -x /usr/bin/rpcinfo ]
		then
			if rpcinfo -u "$response" mountd >/dev/null
			then
				nfsserver="$response"
			else
				echo "$response は NFS サーバではないようです。"
			fi
		elif [ -x /bin/ping ]
		then
			if ping -q -c 1 "$response" | grep -q ', 1 packets received'
			then
				nfsserver="$response"
			else
				echo "$response はダウンしているか存在しないようです。"
			fi
		else
			echo \
"(/usr/bin/rpcinfo または /bin/ping がない為にサーバをチェックできません。)"
			nfsserver="$response"
		fi
	done
	while [ -z "$nfsrempath" ]
	do
		echo -n "
NFS サーバ内の Debian ファイルのあるファイルシステムへのフルパス
を入力して下さい。  [$defaultnfsrempath]  "
		read response
		if [ -z "$response" -a -n "$defaultnfsrempath" ]
		then
			response="$defaultnfsrempath"
		else
			response="`echo \"$response\" | sed -e 's:/$::; s:^/*:/:'`"
		fi
		umount="$mountpoint"
		if mount -rt nfs -o nosuid,nodev "$nfsserver:$response" "$mountpoint"
		then
			echo
			nfsrempath="$response"
		else
			umount=""
			echo \
	"NFS ファイルシステム $nfsserver:$response をマウントできません。"
		fi
	done
	nfs="$nfsserver:$nfsrempath"
fi

if [ $option = harddisk ]
then
	set +e
	echo -e 'p\nq\n' | fdisk /dev/hda 2>/dev/null >$tp.f
	if [ $? != 0 ]
	then
		echo -e 'p\nq\n' | fdisk /dev/sda 2>/dev/null >$tp.f
	fi
	set -e
	perl -ne '
next unless /^ *Device +Boot +Begin +Start +End +Blocks +Id +System *$/i .. !/\S/;
next unless / [146] +DOS \d+-bit \S+$/;
next unless m:^/\S+:;
print $&;		' <$tp.f >$tp.d
	newdefaultdevice="`cat $tp.d`"
	echo "
どのディスクパーティションに distribution ファイルが含まれているかを
知る必要があります。ディスクパーティションは Linux でのブロックデバ
イス名で指定して下さい。"
	if [ -n "$newdefaultdevice" ]
	then
		echo \
"ところで、$newdefaultdevice は DOS パーティションのようです。"
	fi
	getblockdev "パーティションのブロックデバイス名を入力して下さい。"
fi

if [ -n "$mountpoint" ]
then
	# We must have $mountpoint
	if [ $option = cdrom ]
	then
		echo \
'CD-ROM の root からの相対パスを入力する必要があります。
'
	elif [ $option = nfs ]
	then
		echo \
"NFS ファイルシステムの root からの、すなわち NFS サーバ上の$nfsrempath
ディレクトリへのパスを入力する必要があります。
"
	else
		echo \
"$blockdevice 上の $fstype ファイルシステムの root からの相対パスを
入力する必要があります。
"
	fi
fi

while true
do
	if [ $option = cdrom ]
	then
		echo \
"Debian distribution のトップレベル(通常はパッケージマスタファイルを
含んでいます) が CD-ROM 上のどこにあるかを知る必要があります。

CD-ROM が不完全に編集されて distribution の忠実なコピーを持っていない
場合は \`none' を答えて下さい。必要な部分へ個別に進みます。"
	else
		echo \
"関連するファイルを見つけやすくする為に、Debian distribution に忠実な
コピーからのインストールを行ないたいと思います。この為に、どこに
distribution のコピーのトップレベル (このディレクトリには通常
Packages-Master ファイルを含んでいます) があるかを知る必要があります。

利用可能な distribution の忠実なコピーがない場合は \`none' と答えて下
さい。必要な部分へ個別に進みます。"
	fi
	defhierbase=none
	if [ -n "$p_hierbase" ]
	then
		if [ -d "$mountpoint/$p_hierbase/stable/binary-i386" ]
		then
			echo "
前回は \`$p_hierbase' が指定されました。適切なようです。"
			defhierbase="$p_hierbase"
		else
			echo "
前回は \`$p_hierbase' が指定されましたが、\`$p_hierbase/stable/binary'
が存在しないようなので適切ではありません。"
		fi
	fi
	if [ none = "$defhierbase" -a -d "$mountpoint/debian/stable/binary-i386" ]
	then
		echo "
\`/debian' が存在して妥当なようなので、こちらがデフォルトになっています。"
		defhierbase=/debian
	fi
	echo -n \
"Distribution のトップレベルは？ [$defhierbase]  "
	read response
	if [ -z "$response" ]
	then
		response="$defhierbase"
	fi
	if [ none = "$response" ]
	then
		hierbase=""
		break
	elif [ -d "$mountpoint/$response/stable/binary-i386" ]
	then
		hierbase="`echo \"$response\" | sed -e 's:/$::; s:^/*:/:'`"
		break
	fi
	echo \
"$response/stable/binary-i386 が存在しません。
"
done

whichmain=stable
if [ -n "$hierbase" ]
then
	if [ -d "$mountpoint/$hierbase/unstable/binary-$iarch" ]
	then
		echo \
'
インストールに安定リリースの distribution と作業中の開発ツリーの両方
が利用可能です。未リリースの開発ツリーを使用しますか？（こちらは危険
を伴って、テストの手助けをしたいエキスパート向けのものです）'
		yesno "$p_usedevel" '未リリースの開発 distribution を使用しますか？'
		usedevel="$yesno"
		if [ "$usedevel" = yes ]
		then
			whichmain=development
		fi
	else
		usedevel=no
	fi
	echo
fi

case "$hierbase" in
/* )	;;
'' )	;;
* )	hierbase="/$hierbase" ;;
esac

check_binary () {
	# args: area-in-messages directory
	if ! [ -d "$mountpoint$2" ]
	then
		echo "\`$2' は存在しません。"
		return
	fi
	if ! find "$mountpoint$2" -follow -name '*.deb' -print \
		2>/dev/null | head -1 | grep . >/dev/null
	then
		echo "\`$2' は *.deb パッケージを含んでいません。うーん…"
		return
	fi
	echo "\`$2' を $1 バイナリディレクトリとして使用します。"
	this_binary="$2"
}

find_area () {
	# args: area-in-messages area-in-vars subdirectory-in-hier
	#       last-time-binary last-time-packages
	this_binary=''
	this_packages=''
	if [ -n "$hierbase" ]
	then
		check_binary $1 "$hierbase/$3/binary-$iarch"
	fi
	if [ $option = cdrom -a $2 = nf -a -z "$this_binary" ]
	then
		echo '
注意：多くの Debian の CD-ROM distribution は、distribution サイトの 
`non-free'\'' ディレクトリ中の利用可能なプログラムを含んでいません。
これは、これらのプログラムが CD-ROM 販売による利益に関して配布を妨げる
ような著作権を持っているため、つまりこれらのソフトがフリーソフトウェア
でないためです。これらのプログラムをインストールしたい場合には、代わり
のソースからインストールしなければなりません。'
	fi
	while [ -z "$this_binary" ]
	do
		defaultbinary="$4"
		echo "
$1 distribution エリア（このディレクトリは distribution サイト
では \`$3/binary' になっています）からの *.deb パッケージを含ん
でいるディレクトリはどこにありますか？　このエリアが利用できない場合
には \`none' と答えて下さい。"
		if [ $2 != main -a -z "$defaultbinary" ]
		then
			defaultbinary=none
		fi
		echo -n \
"_$1_ バイナリディレクトリを入力して下さい。 [$4]
 ?  "
		read response
		if [ -z "$response" -a -n "$defaultbinary" ]
		then
			response="$defaultbinary"
		fi
		if [ none = "$response" ]
		then
			break
		fi
		case "$response" in
		'' | none)	continue		;;
		esac
		check_binary $1 "`echo \"$response\" | sed -e 's:/$::; s:^/*:/:'`"
	done
	if [ -n "$this_binary" ]
	then
		for f in Packages.gz packages.gz Packages packages
		do
			if [ -f "$mountpoint/$this_binary/$f" ]
			then
				echo "\`$this_binary/$f' を $1 に使用します。"
				this_packages="$this_binary/$f"
				break
			fi
		done
		while [ -z "$this_packages" ]
		do
			echo -n "

$1 \`Packages' ファイルを見つけられません。\`Packages' ファイル中の情報
は新規インストールの間のパッケージ選択の為に重要で、更新に大変役に立ち
ます。

ダウンロード中にそのファイルを見落とした場合、今すぐそのファイルを入手
して、その後このインストール手続きまで戻らなければなりません。その際、
FTP サイトあるいは CD-ROM の各エリアの \`binary' サブディレクトリ中に
Packages ファイルと Packages.gz ファイル（どちらも利用できます）を見つ
けると思います。そうでなければ、（かなり遅くなりますが）distribution 
エリアのパッケージ中を検索する事ができます。この方法でインストールする
場合には、\`scan' を入力して下さい。

インストールしたい distribution エリア毎の分離した Packages ファイルが
必要です。

_$1_ \`Packages' ファイルはどこにありますか？ (ない場合は \`none' を入
力)
[$5] ?  "
			read response
			if [ -z "$response" -a -n "$5" ]
			then
				response="$5"
			fi
			case "$response" in
			'')		continue			;;
			none)		break				;;
			scan)		this_packages=scan		;;
			/*)		this_packages="$response"	;;
			*)		this_packages="/$response"	;;
			esac
		done
	fi
	eval $2'_binary="$this_binary"'
	eval $2'_packages="$this_packages"'
}

find_area main main "$whichmain" "$p_main_binary" "$p_main_packages"
find_area contrib ctb contrib "$p_ctb_binary" "$p_ctb_packages"
find_area non-free nf non-free "$p_nf_binary" "$p_nf_packages"
find_area local lcl local "$p_lcl_binary" "$p_lcl_packages"

echo -n '
[Enter] を押して下さい。'
read response

exec 3>shvar.$option.new

outputparam p_blockdev "$blockdevice"
outputparam p_fstype "$fstype"
outputparam p_mountpoint "$mountpoint"
outputparam p_nfsserver "$nfsserver"
outputparam p_nfsrempath "$nfsrempath"
outputparam p_nfs "$nfs"
outputparam p_hierbase "$hierbase"
outputparam p_usedevel "$usedevel"
outputparam p_main_packages "$main_packages"
outputparam p_main_binary "$main_binary"
outputparam p_ctb_packages "$ctb_packages"
outputparam p_ctb_binary "$ctb_binary"
outputparam p_nf_packages "$nf_packages"
outputparam p_nf_binary "$nf_binary"
outputparam p_lcl_packages "$lcl_packages"
outputparam p_lcl_binary "$lcl_binary"

mv shvar.$option.new shvar.$option

xit=0
