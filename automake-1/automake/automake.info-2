This is automake.info, produced by Makeinfo version 3.12b from
automake.texi.

INFO-DIR-SECTION GNU admin
START-INFO-DIR-ENTRY
* automake: (automake).		Making Makefile.in's
END-INFO-DIR-ENTRY

INFO-DIR-SECTION Individual utilities
START-INFO-DIR-ENTRY
* aclocal: (automake)Invoking aclocal.          Generating aclocal.m4
END-INFO-DIR-ENTRY

   This file documents GNU automake 1.4

   Copyright (C) 1995, 96, 97, 98 Free Software Foundation, Inc.

   Permission is granted to make and distribute verbatim copies of this
manual provided the copyright notice and this permission notice are
preserved on all copies.

   Permission is granted to copy and distribute modified versions of
this manual under the conditions for verbatim copying, provided that
the entire resulting derived work is distributed under the terms of a
permission notice identical to this one.

   Permission is granted to copy and distribute translations of this
manual into another language, under the above conditions for modified
versions, except that this permission notice may be stated in a
translation approved by the Foundation.


File: automake.info,  Node: A Shared Library,  Next: Program variables,  Prev: LIBOBJS,  Up: Programs

Building a Shared Library
=========================

   Building shared libraries is a relatively complex matter.  For this
reason, GNU Libtool (*note Introduction: (libtool)Top.) was created to
help build shared libraries in a platform-independent way.

   Automake uses Libtool to build libraries declared with the
`LTLIBRARIES' primary.  Each `_LTLIBRARIES' variable is a list of
shared libraries to build.  For instance, to create a library named
`libgettext.a' and its corresponding shared libraries, and install them
in `libdir', write:

     lib_LTLIBRARIES = libgettext.la

   Note that shared libraries _must_ be installed, so
`check_LTLIBRARIES' is not allowed.  However, `noinst_LTLIBRARIES' is
allowed.  This feature should be used for libtool "convenience
libraries".

   For each library, the `LIBRARY_LIBADD' variable contains the names
of extra libtool objects (`.lo' files) to add to the shared library.
The `LIBRARY_LDFLAGS' variable contains any additional libtool flags,
such as `-version-info' or `-static'.

   Where an ordinary library might include `@LIBOBJS@', a libtool
library must use `@LTLIBOBJS@'.  This is required because the object
files that libtool operates on do not necessarily end in `.o'.  The
libtool manual contains more details on this topic.

   For libraries installed in some directory, Automake will
automatically supply the appropriate `-rpath' option.  However, for
libraries determined at configure time (and thus mentioned in
`EXTRA_LTLIBRARIES'), Automake does not know the eventual installation
directory; for such libraries you must add the `-rpath' option to the
appropriate `_LDFLAGS' variable by hand.

   *Note Using Automake with Libtool: (libtool)Using Automake, for more
information.


File: automake.info,  Node: Program variables,  Next: Yacc and Lex,  Prev: A Shared Library,  Up: Programs

Variables used when building a program
======================================

   Occasionally it is useful to know which `Makefile' variables
Automake uses for compilations; for instance you might need to do your
own compilation in some special cases.

   Some variables are inherited from Autoconf; these are `CC',
`CFLAGS', `CPPFLAGS', `DEFS', `LDFLAGS', and `LIBS'.

   There are some additional variables which Automake itself defines:

`INCLUDES'
     A list of `-I' options.  This can be set in your `Makefile.am' if
     you have special directories you want to look in.  Automake already
     provides some `-I' options automatically.  In particular it
     generates `-I$(srcdir)' and a `-I' pointing to the directory
     holding `config.h' (if you've used `AC_CONFIG_HEADER' or
     `AM_CONFIG_HEADER').

     `INCLUDES' can actually be used for other `cpp' options besides
     `-I'.  For instance, it is sometimes used to pass arbitrary `-D'
     options to the compiler.

`COMPILE'
     This is the command used to actually compile a C source file.  The
     filename is appended to form the complete command line.

`LINK'
     This is the command used to actually link a C program.


File: automake.info,  Node: Yacc and Lex,  Next: C++ Support,  Prev: Program variables,  Up: Programs

Yacc and Lex support
====================

   Automake has somewhat idiosyncratic support for Yacc and Lex.

   Automake assumes that the `.c' file generated by `yacc' (or `lex')
should be named using the basename of the input file.  That is, for a
yacc source file `foo.y', Automake will cause the intermediate file to
be named `foo.c' (as opposed to `y.tab.c', which is more traditional).

   The extension of a yacc source file is used to determine the
extension of the resulting `C' or `C++' file.  Files with the extension
`.y' will be turned into `.c' files; likewise, `.yy' will become `.cc';
`.y++', `c++'; and `.yxx', `.cxx'.

   Likewise, lex source files can be used to generate `C' or `C++'; the
extensions `.l', `.ll', `.l++', and `.lxx' are recognized.

   You should never explicitly mention the intermediate (`C' or `C++')
file in any `SOURCES' variable; only list the source file.

   The intermediate files generated by `yacc' (or `lex') will be
included in any distribution that is made.  That way the user doesn't
need to have `yacc' or `lex'.

   If a `yacc' source file is seen, then your `configure.in' must
define the variable `YACC'.  This is most easily done by invoking the
macro `AC_PROG_YACC' (*note Particular Program Checks:
(autoconf)Particular Programs.).

   Similarly, if a `lex' source file is seen, then your `configure.in'
must define the variable `LEX'.  You can use `AC_PROG_LEX' to do this
(*note Particular Program Checks: (autoconf)Particular Programs.).
Automake's `lex' support also requires that you use the `AC_DECL_YYTEXT'
macro--automake needs to know the value of `LEX_OUTPUT_ROOT'.  This is
all handled for you if you use the `AM_PROG_LEX' macro (*note
Macros::.).

   Automake makes it possible to include multiple `yacc' (or `lex')
source files in a single program.  Automake uses a small program called
`ylwrap' to run `yacc' (or `lex') in a subdirectory.  This is necessary
because yacc's output filename is fixed, and a parallel make could
conceivably invoke more than one instance of `yacc' simultaneously.
The `ylwrap' program is distributed with Automake.  It should appear in
the directory specified by `AC_CONFIG_AUX_DIR' (*note Finding
`configure' Input: (autoconf)Input.), or the current directory if that
macro is not used in `configure.in'.

   For `yacc', simply managing locking is insufficient.  The output of
`yacc' always uses the same symbol names internally, so it isn't
possible to link two `yacc' parsers into the same executable.

   We recommend using the following renaming hack used in `gdb':
     #define	yymaxdepth c_maxdepth
     #define	yyparse	c_parse
     #define	yylex	c_lex
     #define	yyerror	c_error
     #define	yylval	c_lval
     #define	yychar	c_char
     #define	yydebug	c_debug
     #define	yypact	c_pact
     #define	yyr1	c_r1
     #define	yyr2	c_r2
     #define	yydef	c_def
     #define	yychk	c_chk
     #define	yypgo	c_pgo
     #define	yyact	c_act
     #define	yyexca	c_exca
     #define yyerrflag c_errflag
     #define yynerrs	c_nerrs
     #define	yyps	c_ps
     #define	yypv	c_pv
     #define	yys	c_s
     #define	yy_yys	c_yys
     #define	yystate	c_state
     #define	yytmp	c_tmp
     #define	yyv	c_v
     #define	yy_yyv	c_yyv
     #define	yyval	c_val
     #define	yylloc	c_lloc
     #define yyreds	c_reds
     #define yytoks	c_toks
     #define yylhs	c_yylhs
     #define yylen	c_yylen
     #define yydefred c_yydefred
     #define yydgoto	c_yydgoto
     #define yysindex c_yysindex
     #define yyrindex c_yyrindex
     #define yygindex c_yygindex
     #define yytable	 c_yytable
     #define yycheck	 c_yycheck
     #define yyname   c_yyname
     #define yyrule   c_yyrule

   For each define, replace the `c_' prefix with whatever you like.
These defines work for `bison', `byacc', and traditional `yacc's.  If
you find a parser generator that uses a symbol not covered here, please
report the new name so it can be added to the list.


File: automake.info,  Node: C++ Support,  Next: Fortran 77 Support,  Prev: Yacc and Lex,  Up: Programs

C++ Support
===========

   Automake includes full support for C++.

   Any package including C++ code must define the output variable `CXX'
in `configure.in'; the simplest way to do this is to use the
`AC_PROG_CXX' macro (*note Particular Program Checks:
(autoconf)Particular Programs.).

   A few additional variables are defined when a C++ source file is
seen:

`CXX'
     The name of the C++ compiler.

`CXXFLAGS'
     Any flags to pass to the C++ compiler.

`CXXCOMPILE'
     The command used to actually compile a C++ source file.  The file
     name is appended to form the complete command line.

`CXXLINK'
     The command used to actually link a C++ program.


File: automake.info,  Node: Fortran 77 Support,  Next: Support for Other Languages,  Prev: C++ Support,  Up: Programs

Fortran 77 Support
==================

   Automake includes full support for Fortran 77.

   Any package including Fortran 77 code must define the output variable
`F77' in `configure.in'; the simplest way to do this is to use the
`AC_PROG_F77' macro (*note Particular Program Checks:
(autoconf)Particular Programs.).  *Note Fortran 77 and Autoconf::.

   A few additional variables are defined when a Fortran 77 source file
is seen:

`F77'
     The name of the Fortran 77 compiler.

`FFLAGS'
     Any flags to pass to the Fortran 77 compiler.

`RFLAGS'
     Any flags to pass to the Ratfor compiler.

`F77COMPILE'
     The command used to actually compile a Fortran 77 source file.
     The file name is appended to form the complete command line.

`FLINK'
     The command used to actually link a pure Fortran 77 program or
     shared library.

   Automake can handle preprocessing Fortran 77 and Ratfor source files
in addition to compiling them(1).  Automake also contains some support
for creating programs and shared libraries that are a mixture of
Fortran 77 and other languages (*note Mixing Fortran 77 With C and
C++::.).

   These issues are covered in the following sections.

* Menu:

* Preprocessing Fortran 77::
* Compiling Fortran 77 Files::
* Mixing Fortran 77 With C and C++::
* Fortran 77 and Autoconf::

   ---------- Footnotes ----------

   (1) Much, if not most, of the information in the following sections
pertaining to preprocessing Fortran 77 programs was taken almost
verbatim from *Note Catalogue of Rules: (make)Catalogue of Rules.


File: automake.info,  Node: Preprocessing Fortran 77,  Next: Compiling Fortran 77 Files,  Prev: Fortran 77 Support,  Up: Fortran 77 Support

Preprocessing Fortran 77
------------------------

   `N.f' is made automatically from `N.F' or `N.r'.  This rule runs
just the preprocessor to convert a preprocessable Fortran 77 or Ratfor
source file into a strict Fortran 77 source file.  The precise command
used is as follows:

`.F'
     `$(F77) -F $(DEFS) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS)
     $(AM_FFLAGS) $(FFLAGS)'

`.r'
     `$(F77) -F $(AM_FFLAGS) $(FFLAGS) $(AM_RFLAGS) $(RFLAGS)'


File: automake.info,  Node: Compiling Fortran 77 Files,  Next: Mixing Fortran 77 With C and C++,  Prev: Preprocessing Fortran 77,  Up: Fortran 77 Support

Compiling Fortran 77 Files
--------------------------

   `N.o' is made automatically from `N.f', `N.F' or `N.r' by running
the Fortran 77 compiler.  The precise command used is as follows:

`.f'
     `$(F77) -c $(AM_FFLAGS) $(FFLAGS)'

`.F'
     `$(F77) -c $(DEFS) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS)
     $(AM_FFLAGS) $(FFLAGS)'

`.r'
     `$(F77) -c $(AM_FFLAGS) $(FFLAGS) $(AM_RFLAGS) $(RFLAGS)'


File: automake.info,  Node: Mixing Fortran 77 With C and C++,  Next: Fortran 77 and Autoconf,  Prev: Compiling Fortran 77 Files,  Up: Fortran 77 Support

Mixing Fortran 77 With C and C++
--------------------------------

   Automake currently provides _limited_ support for creating programs
and shared libraries that are a mixture of Fortran 77 and C and/or C++.
However, there are many other issues related to mixing Fortran 77 with
other languages that are _not_ (currently) handled by Automake, but
that are handled by other packages(1).

   Automake can help in two ways:

  1. Automatic selection of the linker depending on which combinations
     of source code.

  2. Automatic selection of the appropriate linker flags (e.g. `-L' and
     `-l') to pass to the automatically selected linker in order to link
     in the appropriate Fortran 77 intrinsic and run-time libraries.

     These extra Fortran 77 linker flags are supplied in the output
     variable `FLIBS' by the `AC_F77_LIBRARY_LDFLAGS' Autoconf macro
     supplied with newer versions of Autoconf (Autoconf version 2.13 and
     later).  *Note Fortran 77 Compiler Characteristics:
     (autoconf)Fortran 77 Compiler Characteristics.

   If Automake detects that a program or shared library (as mentioned in
some `_PROGRAMS' or `_LTLIBRARIES' primary) contains source code that
is a mixture of Fortran 77 and C and/or C++, then it requires that the
macro `AC_F77_LIBRARY_LDFLAGS' be called in `configure.in', and that
either `$(FLIBS)' or `@FLIBS@' appear in the appropriate `_LDADD' (for
programs) or `_LIBADD' (for shared libraries) variables.  It is the
responsibility of the person writing the `Makefile.am' to make sure
that `$(FLIBS)' or `@FLIBS@' appears in the appropriate `_LDADD' or
`_LIBADD' variable.

   For example, consider the following `Makefile.am':

     bin_PROGRAMS = foo
     foo_SOURCES  = main.cc foo.f
     foo_LDADD    = libfoo.la @FLIBS@
     
     pkglib_LTLIBRARIES = libfoo.la
     libfoo_la_SOURCES  = bar.f baz.c zardoz.cc
     libfoo_la_LIBADD   = $(FLIBS)

   In this case, Automake will insist that `AC_F77_LIBRARY_LDFLAGS' is
mentioned in `configure.in'.  Also, if `@FLIBS@' hadn't been mentioned
in `foo_LDADD' and `libfoo_la_LIBADD', then Automake would have issued
a warning.

* Menu:

* How the Linker is Chosen::

   ---------- Footnotes ----------

   (1) For example, the cfortran package
(http://www-zeus.desy.de/~burow/cfortran/) addresses all of these
inter-language issues, and runs under nearly all Fortran 77, C and C++
compilers on nearly all platforms.  However, `cfortran' is not yet Free
Software, but it will be in the next major release.


File: automake.info,  Node: How the Linker is Chosen,  Prev: Mixing Fortran 77 With C and C++,  Up: Mixing Fortran 77 With C and C++

How the Linker is Chosen
........................

   The following diagram demonstrates under what conditions a particular
linker is chosen by Automake.

   For example, if Fortran 77, C and C++ source code were to be compiled
into a program, then the C++ linker will be used.  In this case, if the
C or Fortran 77 linkers required any special libraries that weren't
included by the C++ linker, then they must be manually added to an
`_LDADD' or `_LIBADD' variable by the user writing the `Makefile.am'.

                          \              Linker
               source      \
                code        \     C        C++     Fortran
          -----------------  +---------+---------+---------+
                             |         |         |         |
          C                  |    x    |         |         |
                             |         |         |         |
                             +---------+---------+---------+
                             |         |         |         |
              C++            |         |    x    |         |
                             |         |         |         |
                             +---------+---------+---------+
                             |         |         |         |
                    Fortran  |         |         |    x    |
                             |         |         |         |
                             +---------+---------+---------+
                             |         |         |         |
          C + C++            |         |    x    |         |
                             |         |         |         |
                             +---------+---------+---------+
                             |         |         |         |
          C +       Fortran  |         |         |    x    |
                             |         |         |         |
                             +---------+---------+---------+
                             |         |         |         |
              C++ + Fortran  |         |    x    |         |
                             |         |         |         |
                             +---------+---------+---------+
                             |         |         |         |
          C + C++ + Fortran  |         |    x    |         |
                             |         |         |         |
                             +---------+---------+---------+


File: automake.info,  Node: Fortran 77 and Autoconf,  Prev: Mixing Fortran 77 With C and C++,  Up: Fortran 77 Support

Fortran 77 and Autoconf
-----------------------

   The current Automake support for Fortran 77 requires a recent enough
version Autoconf that also includes support for Fortran 77.  Full
Fortran 77 support was added to Autoconf 2.13, so you will want to use
that version of Autoconf or later.


File: automake.info,  Node: Support for Other Languages,  Next: ANSI,  Prev: Fortran 77 Support,  Up: Programs

Support for Other Languages
===========================

   Automake currently only includes full support for C, C++ (*note C++
Support::.)and Fortran 77 (*note Fortran 77 Support::.).  There is only
rudimentary support for other languages, support for which will be
improved based on user demand.


File: automake.info,  Node: ANSI,  Next: Dependencies,  Prev: Support for Other Languages,  Up: Programs

Automatic de-ANSI-fication
==========================

   Although the GNU standards allow the use of ANSI C, this can have the
effect of limiting portability of a package to some older compilers
(notably SunOS).

   Automake allows you to work around this problem on such machines by
"de-ANSI-fying" each source file before the actual compilation takes
place.

   If the `Makefile.am' variable `AUTOMAKE_OPTIONS' (*note Options::.)
contains the option `ansi2knr' then code to handle de-ANSI-fication is
inserted into the generated `Makefile.in'.

   This causes each C source file in the directory to be treated as
ANSI C.  If an ANSI C compiler is available, it is used.  If no ANSI C
compiler is available, the `ansi2knr' program is used to convert the
source files into K&R C, which is then compiled.

   The `ansi2knr' program is simple-minded.  It assumes the source code
will be formatted in a particular way; see the `ansi2knr' man page for
details.

   Support for de-ANSI-fication requires the source files `ansi2knr.c'
and `ansi2knr.1' to be in the same package as the ANSI C source; these
files are distributed with Automake.  Also, the package `configure.in'
must call the macro `AM_C_PROTOTYPES' (*note Macros::.).

   Automake also handles finding the `ansi2knr' support files in some
other directory in the current package.  This is done by prepending the
relative path to the appropriate directory to the `ansi2knr' option.
For instance, suppose the package has ANSI C code in the `src' and
`lib' subdirs.  The files `ansi2knr.c' and `ansi2knr.1' appear in
`lib'.  Then this could appear in `src/Makefile.am':

     AUTOMAKE_OPTIONS = ../lib/ansi2knr

   If no directory prefix is given, the files are assumed to be in the
current directory.

   Files mentioned in `LIBOBJS' which need de-ANSI-fication will not be
automatically handled.  That's because `configure' will generate an
object name like `regex.o', while `make' will be looking for `regex_.o'
(when de-ANSI-fying).  Eventually this problem will be fixed via
`autoconf' magic, but for now you must put this code into your
`configure.in', just before the `AC_OUTPUT' call:

     # This is necessary so that .o files in LIBOBJS are also built via
     # the ANSI2KNR-filtering rules.
     LIBOBJS=`echo $LIBOBJS|sed 's/\.o /\$U.o /g;s/\.o$/\$U.o/'`


File: automake.info,  Node: Dependencies,  Prev: ANSI,  Up: Programs

Automatic dependency tracking
=============================

   As a developer it is often painful to continually update the
`Makefile.in' whenever the include-file dependencies change in a
project.  Automake supplies a way to automatically track dependency
changes, and distribute the dependencies in the generated `Makefile.in'.

   Currently this support requires the use of GNU `make' and `gcc'.  It
might become possible in the future to supply a different dependency
generating program, if there is enough demand.  In the meantime, this
mode is enabled by default if any C program or library is defined in
the current directory, so you may get a `Must be a separator' error
from non-GNU make.

   When you decide to make a distribution, the `dist' target will
re-run `automake' with `--include-deps' and other options.  *Note
Invoking Automake::, and *Note Options::.  This will cause the
previously generated dependencies to be inserted into the generated
`Makefile.in', and thus into the distribution.  This step also turns
off inclusion of the dependency generation code, so that those who
download your distribution but don't use GNU `make' and `gcc' will not
get errors.

   When added to the `Makefile.in', the dependencies have all
system-specific dependencies automatically removed.  This can be done by
listing the files in `OMIT_DEPENDENCIES'.  For instance all references
to system header files are removed by Automake.  Sometimes it is useful
to specify that a certain header file should be removed.  For instance
if your `configure.in' uses `AM_WITH_REGEX', then any dependency on
`rx.h' or `regex.h' should be removed, because the correct one cannot
be known until the user configures the package.

   As it turns out, Automake is actually smart enough to handle the
particular case of the regular expression header.  It will also
automatically omit `libintl.h' if `AM_GNU_GETTEXT' is used.

   Automatic dependency tracking can be suppressed by putting
`no-dependencies' in the variable `AUTOMAKE_OPTIONS'.

   If you unpack a distribution made by `make dist', and you want to
turn on the dependency-tracking code again, simply re-run `automake'.

   The actual dependency files are put under the build directory, in a
subdirectory named `.deps'.  These dependencies are machine specific.
It is safe to delete them if you like; they will be automatically
recreated during the next build.


File: automake.info,  Node: Other objects,  Next: Other GNU Tools,  Prev: Programs,  Up: Top

Other Derived Objects
*********************

   Automake can handle derived objects which are not C programs.
Sometimes the support for actually building such objects must be
explicitly supplied, but Automake will still automatically handle
installation and distribution.

* Menu:

* Scripts::                     Executable scripts
* Headers::                     Header files
* Data::                        Architecture-independent data files
* Sources::                     Derived sources


File: automake.info,  Node: Scripts,  Next: Headers,  Prev: Other objects,  Up: Other objects

Executable Scripts
==================

   It is possible to define and install programs which are scripts.
Such programs are listed using the `SCRIPTS' primary name.  Automake
doesn't define any dependencies for scripts; the `Makefile.am' should
include the appropriate rules.

   Automake does not assume that scripts are derived objects; such
objects must be deleted by hand (*note Clean::.).

   The `automake' program itself is a Perl script that is generated at
configure time from `automake.in'.  Here is how this is handled:

     bin_SCRIPTS = automake

   Since `automake' appears in the `AC_OUTPUT' macro, a target for it
is automatically generated.

   Script objects can be installed in `bindir', `sbindir',
`libexecdir', or `pkgdatadir'.


File: automake.info,  Node: Headers,  Next: Data,  Prev: Scripts,  Up: Other objects

Header files
============

   Header files are specified by the `HEADERS' family of variables.
Generally header files are not installed, so the `noinst_HEADERS'
variable will be the most used.

   All header files must be listed somewhere; missing ones will not
appear in the distribution.  Often it is clearest to list uninstalled
headers with the rest of the sources for a program.  *Note A Program::.
Headers listed in a `_SOURCES' variable need not be listed in any
`_HEADERS' variable.

   Headers can be installed in `includedir', `oldincludedir', or
`pkgincludedir'.


File: automake.info,  Node: Data,  Next: Sources,  Prev: Headers,  Up: Other objects

Architecture-independent data files
===================================

   Automake supports the installation of miscellaneous data files using
the `DATA' family of variables.

   Such data can be installed in the directories `datadir',
`sysconfdir', `sharedstatedir', `localstatedir', or `pkgdatadir'.

   By default, data files are _not_ included in a distribution.

   Here is how Automake installs its auxiliary data files:

     pkgdata_DATA = clean-kr.am clean.am ...


File: automake.info,  Node: Sources,  Prev: Data,  Up: Other objects

Built sources
=============

   Occasionally a file which would otherwise be called `source' (e.g. a
C `.h' file) is actually derived from some other file.  Such files
should be listed in the `BUILT_SOURCES' variable.

   Built sources are also not compiled by default.  You must explicitly
mention them in some other `_SOURCES' variable for this to happen.

   Note that, in some cases, `BUILT_SOURCES' will work in somewhat
surprising ways.  In order to get the built sources to work with
automatic dependency tracking, the `Makefile' must depend on
`$(BUILT_SOURCES)'.  This can cause these sources to be rebuilt at what
might seem like funny times.


File: automake.info,  Node: Other GNU Tools,  Next: Documentation,  Prev: Other objects,  Up: Top

Other GNU Tools
***************

   Since Automake is primarily intended to generate `Makefile.in's for
use in GNU programs, it tries hard to interoperate with other GNU tools.

* Menu:

* Emacs Lisp::                  Emacs Lisp
* gettext::                     Gettext
* Guile::                       Guile
* Libtool::                     Libtool
* Java::                        Java


File: automake.info,  Node: Emacs Lisp,  Next: gettext,  Prev: Other GNU Tools,  Up: Other GNU Tools

Emacs Lisp
==========

   Automake provides some support for Emacs Lisp.  The `LISP' primary
is used to hold a list of `.el' files.  Possible prefixes for this
primary are `lisp_' and `noinst_'.  Note that if `lisp_LISP' is
defined, then `configure.in' must run `AM_PATH_LISPDIR' (*note
Macros::.).

   By default Automake will byte-compile all Emacs Lisp source files
using the Emacs found by `AM_PATH_LISPDIR'.  If you wish to avoid
byte-compiling, simply define the variable `ELCFILES' to be empty.
Byte-compiled Emacs Lisp files are not portable among all versions of
Emacs, so it makes sense to turn this off if you expect sites to have
more than one version of Emacs installed.  Furthermore, many packages
don't actually benefit from byte-compilation.  Still, we recommend that
you leave it enabled by default.  It is probably better for sites with
strange setups to cope for themselves than to make the installation less
nice for everybody else.


File: automake.info,  Node: gettext,  Next: Guile,  Prev: Emacs Lisp,  Up: Other GNU Tools

Gettext
=======

   If `AM_GNU_GETTEXT' is seen in `configure.in', then Automake turns
on support for GNU gettext, a message catalog system for
internationalization (*note GNU Gettext: (gettext)GNU Gettext.).

   The `gettext' support in Automake requires the addition of two
subdirectories to the package, `intl' and `po'.  Automake insures that
these directories exist and are mentioned in `SUBDIRS'.

   Furthermore, Automake checks that the definition of `ALL_LINGUAS' in
`configure.in' corresponds to all the valid `.po' files, and nothing
more.


File: automake.info,  Node: Guile,  Next: Libtool,  Prev: gettext,  Up: Other GNU Tools

Guile
=====

   Automake provides some automatic support for writing Guile modules.
Automake will turn on Guile support if the `AM_INIT_GUILE_MODULE' macro
is used in `configure.in'.

   Right now Guile support just means that the `AM_INIT_GUILE_MODULE'
macro is understood to mean:
   * `AM_INIT_AUTOMAKE' is run.

   * `AC_CONFIG_AUX_DIR' is run, with a path of `..'.

   As the Guile module code matures, no doubt the Automake support will
grow as well.


File: automake.info,  Node: Libtool,  Next: Java,  Prev: Guile,  Up: Other GNU Tools

Libtool
=======

   Automake provides support for GNU Libtool (*note Introduction:
(libtool)Top.) with the `LTLIBRARIES' primary.  *Note A Shared
Library::.


File: automake.info,  Node: Java,  Prev: Libtool,  Up: Other GNU Tools

Java
====

   Automake provides some minimal support for Java compilation with the
`JAVA' primary.

   Any `.java' files listed in a `_JAVA' variable will be compiled with
`JAVAC' at build time.  By default, `.class' files are not included in
the distribution.

   Currently Automake enforces the restriction that only one `_JAVA'
primary can be used in a given `Makefile.am'.  The reason for this
restriction is that, in general, it isn't possible to know which
`.class' files were generated from which `.java' files - so it would be
impossible to know which files to install where.


File: automake.info,  Node: Documentation,  Next: Install,  Prev: Other GNU Tools,  Up: Top

Building documentation
**********************

   Currently Automake provides support for Texinfo and man pages.

* Menu:

* Texinfo::                     Texinfo
* Man pages::                   Man pages


File: automake.info,  Node: Texinfo,  Next: Man pages,  Prev: Documentation,  Up: Documentation

Texinfo
=======

   If the current directory contains Texinfo source, you must declare it
with the `TEXINFOS' primary.  Generally Texinfo files are converted
into info, and thus the `info_TEXINFOS' macro is most commonly used
here.  Note that any Texinfo source file must end in the `.texi' or
`.texinfo' extension.

   If the `.texi' file `@include's `version.texi', then that file will
be automatically generated.  The file `version.texi' defines three
Texinfo macros you can reference: `EDITION', `VERSION', and `UPDATED'.
The first two hold the version number of your package (but are kept
separate for clarity); the last is the date the primary file was last
modified.  The `version.texi' support requires the `mdate-sh' program;
this program is supplied with Automake and automatically included when
`automake' is invoked with the `--add-missing' option.

   Sometimes an info file actually depends on more than one `.texi'
file.  For instance, in GNU Hello, `hello.texi' includes the file
`gpl.texi'.  You can tell Automake about these dependencies using the
`TEXI_TEXINFOS' variable.  Here is how GNU Hello does it:

     info_TEXINFOS = hello.texi
     hello_TEXINFOS = gpl.texi

   By default, Automake requires the file `texinfo.tex' to appear in
the same directory as the Texinfo source.  However, if you used
`AC_CONFIG_AUX_DIR' in `configure.in' (*note Finding `configure' Input:
(autoconf)Input.), then `texinfo.tex' is looked for there.  Automake
supplies `texinfo.tex' if `--add-missing' is given.

   If your package has Texinfo files in many directories, you can use
the variable `TEXINFO_TEX' to tell Automake where to find the canonical
`texinfo.tex' for your package.  The value of this variable should be
the relative path from the current `Makefile.am' to `texinfo.tex':

     TEXINFO_TEX = ../doc/texinfo.tex

   The option `no-texinfo.tex' can be used to eliminate the requirement
for `texinfo.tex'.  Use of the variable `TEXINFO_TEX' is preferable,
however, because that allows the `dvi' target to still work.

   Automake generates an `install-info' target; some people apparently
use this.  By default, info pages are installed by `make install'.
This can be prevented via the `no-installinfo' option.


File: automake.info,  Node: Man pages,  Prev: Texinfo,  Up: Documentation

Man pages
=========

   A package can also include man pages (but see the GNU standards on
this matter, *Note Man Pages: (standards)Man Pages.)  Man pages are
declared using the `MANS' primary.  Generally the `man_MANS' macro is
used.  Man pages are automatically installed in the correct
subdirectory of `mandir', based on the file extension.  They are not
automatically included in the distribution.

   By default, man pages are installed by `make install'.  However,
since the GNU project does not require man pages, many maintainers do
not expend effort to keep the man pages up to date.  In these cases, the
`no-installman' option will prevent the man pages from being installed
by default.  The user can still explicitly install them via `make
install-man'.

   Here is how the documentation is handled in GNU `cpio' (which
includes both Texinfo documentation and man pages):

     info_TEXINFOS = cpio.texi
     man_MANS = cpio.1 mt.1
     EXTRA_DIST = $(man_MANS)

   Texinfo source and info pages are all considered to be source for the
purposes of making a distribution.

   Man pages are not currently considered to be source, because it is
not uncommon for man pages to be automatically generated.  For the same
reason, they are not automatically included in the distribution.


File: automake.info,  Node: Install,  Next: Clean,  Prev: Documentation,  Up: Top

What Gets Installed
*******************

   Naturally, Automake handles the details of actually installing your
program once it has been built.  All `PROGRAMS', `SCRIPTS',
`LIBRARIES', `LISP', `DATA' and `HEADERS' are automatically installed
in the appropriate places.

   Automake also handles installing any specified info and man pages.

   Automake generates separate `install-data' and `install-exec'
targets, in case the installer is installing on multiple machines which
share directory structure--these targets allow the machine-independent
parts to be installed only once.  The `install' target depends on both
of these targets.

   Automake also generates an `uninstall' target, an `installdirs'
target, and an `install-strip' target.

   It is possible to extend this mechanism by defining an
`install-exec-local' or `install-data-local' target.  If these targets
exist, they will be run at `make install' time.

   Variables using the standard directory prefixes `data', `info',
`man', `include', `oldinclude', `pkgdata', or `pkginclude' (e.g.
`data_DATA') are installed by `install-data'.

   Variables using the standard directory prefixes `bin', `sbin',
`libexec', `sysconf', `localstate', `lib', or `pkglib' (e.g.
`bin_PROGRAMS') are installed by `install-exec'.

   Any variable using a user-defined directory prefix with `exec' in
the name (e.g. `myexecbin_PROGRAMS' is installed by `install-exec'.
All other user-defined prefixes are installed by `install-data'.

   Automake generates support for the `DESTDIR' variable in all install
rules.  `DESTDIR' is used during the `make install' step to relocate
install objects into a staging area.  Each object and path is prefixed
with the value of `DESTDIR' before being copied into the install area.
Here is an example of typical DESTDIR usage:

     make DESTDIR=/tmp/staging install

   This places install objects in a directory tree built under
`/tmp/staging'.  If `/gnu/bin/foo' and `/gnu/share/aclocal/foo.m4' are
to be installed, the above command would install
`/tmp/staging/gnu/bin/foo' and `/tmp/staging/gnu/share/aclocal/foo.m4'.

   This feature is commonly used to build install images and packages.
For more information, see *Note Makefile Conventions:
(standards)Makefile Conventions.


File: automake.info,  Node: Clean,  Next: Dist,  Prev: Install,  Up: Top

What Gets Cleaned
*****************

   The GNU Makefile Standards specify a number of different clean rules.
Generally the files that can be cleaned are determined automatically by
Automake.  Of course, Automake also recognizes some variables that can
be defined to specify additional files to clean.  These variables are
`MOSTLYCLEANFILES', `CLEANFILES', `DISTCLEANFILES', and
`MAINTAINERCLEANFILES'.


File: automake.info,  Node: Dist,  Next: Tests,  Prev: Clean,  Up: Top

What Goes in a Distribution
***************************

   The `dist' target in the generated `Makefile.in' can be used to
generate a gzip'd `tar' file for distribution.  The tar file is named
based on the `PACKAGE' and `VERSION' variables; more precisely it is
named `PACKAGE-VERSION.tar.gz'.  You can use the `make' variable
`GZIP_ENV' to control how gzip is run.  The default setting is `--best'.

   For the most part, the files to distribute are automatically found by
Automake: all source files are automatically included in a distribution,
as are all `Makefile.am's and `Makefile.in's.  Automake also has a
built-in list of commonly used files which, if present in the current
directory, are automatically included.  This list is printed by
`automake --help'.  Also, files which are read by `configure' (i.e. the
source files corresponding to the files specified in the `AC_OUTPUT'
invocation) are automatically distributed.

   Still, sometimes there are files which must be distributed, but which
are not covered in the automatic rules.  These files should be listed in
the `EXTRA_DIST' variable.  You can mention files from subdirectories
in `EXTRA_DIST'.  You can also mention a directory there; in this case
the entire directory will be recursively copied into the distribution.

   If you define `SUBDIRS', Automake will recursively include the
subdirectories in the distribution.  If `SUBDIRS' is defined
conditionally (*note Conditionals::.), Automake will normally include
all directories that could possibly appear in `SUBDIRS' in the
distribution.  If you need to specify the set of directories
conditionally, you can set the variable `DIST_SUBDIRS' to the exact
list of subdirectories to include in the distribution.

   Occasionally it is useful to be able to change the distribution
before it is packaged up.  If the `dist-hook' target exists, it is run
after the distribution directory is filled, but before the actual tar
(or shar) file is created.  One way to use this is for distributing
files in subdirectories for which a new `Makefile.am' is overkill:

     dist-hook:
             mkdir $(distdir)/random
             cp -p $(srcdir)/random/a1 $(srcdir)/random/a2 $(distdir)/random

   Automake also generates a `distcheck' target which can be help to
ensure that a given distribution will actually work.  `distcheck' makes
a distribution, and then tries to do a `VPATH' build.


File: automake.info,  Node: Tests,  Next: Options,  Prev: Dist,  Up: Top

Support for test suites
***********************

   Automake supports two forms of test suites.

   If the variable `TESTS' is defined, its value is taken to be a list
of programs to run in order to do the testing.  The programs can either
be derived objects or source objects; the generated rule will look both
in `srcdir' and `.'.  Programs needing data files should look for them
in `srcdir' (which is both an environment variable and a make variable)
so they work when building in a separate directory (*note Build
Directories: (autoconf)Build Directories.), and in particular for the
`distcheck' target (*note Dist::.).

   The number of failures will be printed at the end of the run.  If a
given test program exits with a status of 77, then its result is ignored
in the final count.  This feature allows non-portable tests to be
ignored in environments where they don't make sense.

   The variable `TESTS_ENVIRONMENT' can be used to set environment
variables for the test run; the environment variable `srcdir' is set in
the rule.  If all your test programs are scripts, you can also set
`TESTS_ENVIRONMENT' to an invocation of the shell (e.g.  `$(SHELL)
-x'); this can be useful for debugging the tests.

   If `dejagnu' (ftp://prep.ai.mit.edu/pub/gnu/dejagnu-1.3.tar.gz)
appears in `AUTOMAKE_OPTIONS', then a `dejagnu'-based test suite is
assumed.  The value of the variable `DEJATOOL' is passed as the
`--tool' argument to `runtest'; it defaults to the name of the package.

   The variable `RUNTESTDEFAULTFLAGS' holds the `--tool' and `--srcdir'
flags that are passed to dejagnu by default; this can be overridden if
necessary.

   The variables `EXPECT', `RUNTEST' and `RUNTESTFLAGS' can also be
overridden to provide project-specific values.  For instance, you will
need to do this if you are testing a compiler toolchain, because the
default values do not take into account host and target names.

   In either case, the testing is done via `make check'.


File: automake.info,  Node: Options,  Next: Miscellaneous,  Prev: Tests,  Up: Top

Changing Automake's Behavior
****************************

   Various features of Automake can be controlled by options in the
`Makefile.am'.  Such options are listed in a special variable named
`AUTOMAKE_OPTIONS'.  Currently understood options are:

`gnits'
`gnu'
`foreign'

`cygnus'
     Set the strictness as appropriate.  The `gnits' option also implies
     `readme-alpha' and `check-news'.

`ansi2knr'
`path/ansi2knr'
     Turn on automatic de-ANSI-fication.  *Note ANSI::.  If preceded by
     a path, the generated `Makefile.in' will look in the specified
     directory to find the `ansi2knr' program.  Generally the path
     should be a relative path to another directory in the same
     distribution (though Automake currently does not check this).

`check-news'
     Cause `make dist' to fail unless the current version number appears
     in the first few lines of the `NEWS' file.

`dejagnu'
     Cause `dejagnu'-specific rules to be generated.  *Note Tests::.

`dist-shar'
     Generate a `dist-shar' target as well as the ordinary `dist'
     target.  This new target will create a shar archive of the
     distribution.

`dist-zip'
     Generate a `dist-zip' target as well as the ordinary `dist'
     target.  This new target will create a zip archive of the
     distribution.

`dist-tarZ'
     Generate a `dist-tarZ' target as well as the ordinary `dist'
     target.  This new target will create a compressed tar archive of
     the distribution; a traditional `tar' and `compress' will be
     assumed.  Warning: if you are actually using `GNU tar', then the
     generated archive might contain nonportable constructs.

`no-dependencies'
     This is similar to using `--include-deps' on the command line, but
     is useful for those situations where you don't have the necessary
     bits to make automatic dependency tracking work *Note
     Dependencies::.  In this case the effect is to effectively disable
     automatic dependency tracking.

`no-installinfo'
     The generated `Makefile.in' will not cause info pages to be built
     or installed by default.  However, `info' and `install-info'
     targets will still be available.  This option is disallowed at
     `GNU' strictness and above.

`no-installman'
     The generated `Makefile.in' will not cause man pages to be
     installed by default.  However, an `install-man' target will still
     be available for optional installation.  This option is disallowed
     at `GNU' strictness and above.

`no-texinfo.tex'
     Don't require `texinfo.tex', even if there are texinfo files in
     this directory.

`readme-alpha'
     If this release is an alpha release, and the file `README-alpha'
     exists, then it will be added to the distribution.  If this option
     is given, version numbers are expected to follow one of two forms.
     The first form is `MAJOR.MINOR.ALPHA', where each element is a
     number; the final period and number should be left off for
     non-alpha releases.  The second form is `MAJOR.MINORALPHA', where
     ALPHA is a letter; it should be omitted for non-alpha releases.

VERSION
     A version number (e.g. `0.30') can be specified.  If Automake is
     not newer than the version specified, creation of the `Makefile.in'
     will be suppressed.

   Unrecognized options are diagnosed by `automake'.


File: automake.info,  Node: Miscellaneous,  Next: Include,  Prev: Options,  Up: Top

Miscellaneous Rules
*******************

   There are a few rules and variables that didn't fit anywhere else.

* Menu:

* Tags::                        Interfacing to etags and mkid
* Suffixes::                    Handling new file extensions


File: automake.info,  Node: Tags,  Next: Suffixes,  Prev: Miscellaneous,  Up: Miscellaneous

Interfacing to `etags'
======================

   Automake will generate rules to generate `TAGS' files for use with
GNU Emacs under some circumstances.

   If any C, C++ or Fortran 77 source code or headers are present, then
`tags' and `TAGS' targets will be generated for the directory.

   At the topmost directory of a multi-directory package, a `tags'
target file will be generated which, when run, will generate a `TAGS'
file that includes by reference all `TAGS' files from subdirectories.

   Also, if the variable `ETAGS_ARGS' is defined, a `tags' target will
be generated.  This variable is intended for use in directories which
contain taggable source that `etags' does not understand.

   Here is how Automake generates tags for its source, and for nodes in
its Texinfo file:

     ETAGS_ARGS = automake.in --lang=none \
      --regex='/^@node[ \t]+\([^,]+\)/\1/' automake.texi

   If you add filenames to `ETAGS_ARGS', you will probably also want to
set `TAGS_DEPENDENCIES'.  The contents of this variable are added
directly to the dependencies for the `tags' target.

   Automake will also generate an `ID' target which will run `mkid' on
the source.  This is only supported on a directory-by-directory basis.


File: automake.info,  Node: Suffixes,  Prev: Tags,  Up: Miscellaneous

Handling new file extensions
============================

   It is sometimes useful to introduce a new implicit rule to handle a
file type that Automake does not know about.  If this is done, you must
notify GNU Make of the new suffixes.  This can be done by putting a list
of new suffixes in the `SUFFIXES' variable.

   For instance, currently Automake does not provide any Java support.
If you wrote a macro to generate `.class' files from `.java' source
files, you would also need to add these suffixes to the list:

     SUFFIXES = .java .class


File: automake.info,  Node: Include,  Next: Conditionals,  Prev: Miscellaneous,  Up: Top

Include
*******

   To include another file (perhaps for common rules), the following
syntax is supported:

   include ($(srcdir)|$(top_srcdir))/filename

   Using files in the current directory:
     include $(srcdir)/Makefile.extra

     include Makefile.generated

   Using a file in the top level directory:
     include $(top_srcdir)/filename


File: automake.info,  Node: Conditionals,  Next: Gnits,  Prev: Include,  Up: Top

Conditionals
************

   Automake supports a simple type of conditionals.

   Before using a conditional, you must define it by using
`AM_CONDITIONAL' in the `configure.in' file (*note Macros::.).  The
`AM_CONDITIONAL' macro takes two arguments.

   The first argument to `AM_CONDITIONAL' is the name of the
conditional.  This should be a simple string starting with a letter and
containing only letters, digits, and underscores.

   The second argument to `AM_CONDITIONAL' is a shell condition,
suitable for use in a shell `if' statement.  The condition is evaluated
when `configure' is run.

   Conditionals typically depend upon options which the user provides to
the `configure' script.  Here is an example of how to write a
conditional which is true if the user uses the `--enable-debug' option.

     AC_ARG_ENABLE(debug,
     [  --enable-debug    Turn on debugging],
     [case "${enableval}" in
       yes) debug=true ;;
       no)  debug=false ;;
       *) AC_MSG_ERROR(bad value ${enableval} for --enable-debug) ;;
     esac],[debug=false])
     AM_CONDITIONAL(DEBUG, test x$debug = xtrue)

   Here is an example of how to use that conditional in `Makefile.am':

     if DEBUG
     DBG = debug
     else
     DBG =
     endif
     noinst_PROGRAMS = $(DBG)

   This trivial example could also be handled using EXTRA_PROGRAMS
(*note A Program::.).

   You may only test a single variable in an `if' statement.  The
`else' statement may be omitted.  Conditionals may be nested to any
depth.

   Note that conditionals in Automake are not the same as conditionals
in GNU Make.  Automake conditionals are checked at configure time by the
`configure' script, and affect the translation from `Makefile.in' to
`Makefile'.  They are based on options passed to `configure' and on
results that `configure' has discovered about the host system.  GNU
Make conditionals are checked at `make' time, and are based on
variables passed to the make program or defined in the `Makefile'.

   Automake conditionals will work with any make program.

